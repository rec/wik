head	1.44;
access;
symbols;
locks; strict;
comment	@# @;


1.44
date	2017.08.09.04.59.54;	author TWikiContributor;	state Exp;
branches;
next	1.43;

1.43
date	2015.03.30.07.06.28;	author TWikiContributor;	state Exp;
branches;
next	1.42;

1.42
date	2014.07.04.00.02.09;	author TWikiContributor;	state Exp;
branches;
next	1.41;

1.41
date	2013.10.09.10.28.39;	author TWikiContributor;	state Exp;
branches;
next	1.40;

1.40
date	2012.09.11.23.17.46;	author TWikiContributor;	state Exp;
branches;
next	1.39;

1.39
date	2011.07.16.00.51.40;	author TWikiContributor;	state Exp;
branches;
next	1.38;

1.38
date	2010.05.29.14.44.19;	author TWikiContributor;	state Exp;
branches;
next	1.37;

1.37
date	2009.03.30.09.17.57;	author TWikiContributor;	state Exp;
branches;
next	1.36;

1.36
date	2008.08.03.22.17.46;	author TWikiContributor;	state Exp;
branches;
next	1.35;

1.35
date	2008.01.22.03.21.29;	author TWikiContributor;	state Exp;
branches;
next	1.34;

1.34
date	2007.03.03.14.51.47;	author TWikiContributor;	state Exp;
branches;
next	1.33;

1.33
date	2007.01.16.04.11.57;	author TWikiContributor;	state Exp;
branches;
next	1.32;

1.32
date	2006.10.25.00.21.55;	author TWikiContributor;	state Exp;
branches;
next	1.31;

1.31
date	2006.04.01.05.55.11;	author TWikiContributor;	state Exp;
branches;
next	1.30;

1.30
date	2006.02.01.12.01.18;	author TWikiContributor;	state Exp;
branches;
next	1.29;

1.29
date	2004.08.15.08.47.11;	author PeterThoeny;	state Exp;
branches;
next	1.28;

1.28
date	2003.04.14.07.19.22;	author PeterThoeny;	state Exp;
branches;
next	1.27;

1.27
date	2002.12.29.02.18.11;	author PeterThoeny;	state Exp;
branches;
next	1.26;

1.26
date	2002.05.29.15.36.00;	author PeterThoeny;	state Exp;
branches;
next	1.25;

1.25
date	2002.05.29.07.48.15;	author PeterThoeny;	state Exp;
branches;
next	1.24;

1.24
date	2002.05.12.11.34.00;	author MikeMannix;	state Exp;
branches;
next	1.23;

1.23
date	2002.05.04.06.57.54;	author PeterThoeny;	state Exp;
branches;
next	1.22;

1.22
date	2002.04.02.00.04.19;	author MikeMannix;	state Exp;
branches;
next	1.21;

1.21
date	2002.03.20.11.15.44;	author MikeMannix;	state Exp;
branches;
next	1.20;

1.20
date	2001.12.02.09.02.00;	author MikeMannix;	state Exp;
branches;
next	1.19;

1.19
date	2001.09.16.05.05.21;	author MikeMannix;	state Exp;
branches;
next	1.18;

1.18
date	2001.09.14.08.11.42;	author PeterThoeny;	state Exp;
branches;
next	1.17;

1.17
date	2001.09.12.07.32.21;	author MikeMannix;	state Exp;
branches;
next	1.16;

1.16
date	2001.09.07.10.06.13;	author MikeMannix;	state Exp;
branches;
next	1.15;

1.15
date	2001.09.07.07.26.07;	author MikeMannix;	state Exp;
branches;
next	1.14;

1.14
date	2001.09.05.07.16.35;	author MikeMannix;	state Exp;
branches;
next	1.13;

1.13
date	2001.09.04.04.07.40;	author MikeMannix;	state Exp;
branches;
next	1.12;

1.12
date	2001.08.31.12.18.50;	author MikeMannix;	state Exp;
branches;
next	1.11;

1.11
date	2001.08.30.22.17.20;	author MikeMannix;	state Exp;
branches;
next	1.10;

1.10
date	2001.08.29.09.54.36;	author MikeMannix;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.07.15.41.20;	author JohnTalintyre;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.08.06.06.45;	author PeterThoeny;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.16.08.38.35;	author PeterThoeny;	state Exp;
branches;
next	1.6;

1.6
date	2001.02.26.20.28.42;	author PeterThoeny;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.21.07.50.19;	author PeterThoeny;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.21.01.21.14;	author PeterThoeny;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.14.03.01.38;	author PeterThoeny;	state Exp;
branches;
next	1.2;

1.2
date	2000.11.08.08.15.37;	author PeterThoeny;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.29.05.25.13;	author PeterThoeny;	state Exp;
branches;
next	;


desc
@none
@


1.44
log
@buildrelease
@
text
@%META:TOPICINFO{author="TWikiContributor" date="1502254794" format="1.1" version="44"}%
---+ TWiki Access Control

%VAR{"TWIKI_ACCESS_CONTROL_TOP" default="<nop>" ignorenull="on"}%
_Restricting read and write access to topics and webs, by Users and groups_

TWiki Access Control allows you restrict access to single topics and entire webs, by individual user and by user Groups. Access control, combined with TWikiUserAuthentication, lets you easily create and manage an extremely flexible, fine-grained privilege system.

__%T% Tip:__ TWiki:TWiki.TWikiAccessControlSupplement on TWiki.org has additional documentation on access control.

%TOC%

#ImportantConsideration
---++ An Important Control Consideration

__Your organization will learn that, while fostering an open collaborative environment, soft security (peer review), together with version control (complete audit trail) will take care of any security concern you might have.__

Open, free-form editing is the essence of WikiCulture - what makes TWiki different and often more effective than other collaborative environments. For that reason, it is strongly recommended that decisions to restrict read or write access to a web or a topic are made with great care - the more restrictions, the less wiki in the mix. Experience shows that _unrestricted write access_ works very well because:

   * *Peer influence* is enough to ensure that only relevant content is posted.
   * *Peer editing* - the ability for anyone to rearrange all content on a page - keeps topics focused.
   * In TWiki, content is transparently preserved under *revision control*:
      * Edits can easily be rolled back to a previous revision if needed.
      * Users are encouraged to edit and refactor (condense a long topic), since there's a safety net.

As a *collaboration guideline*:

   * Create broad-based Groups (for more and varied input), and...
   * Avoid creating view-only topics (if you can read it, you should be able to contribute to it).

---++ Permissions settings of the webs on this TWiki site

%IF{"{NoInAllPublicWebs}" then="There are too many webs and it would take too long to show permission settings of them all."}%
%INCLUDE{"%IF{"{NoInAllPublicWebs}" else="SitePermissions"}%" warn="off"}%

%IF{"{NoInAllPublicWebs}" else="__Note:__ Above table comes from SitePermissions"}%

---++ Authentication vs. Access Control

*Authentication:* Identifies who a user is based on a login procedure. See TWikiUserAuthentication.

*Access control:* Restrict access to content based on users and groups once a user is identified.

#UsersAndGroups
---++ Users and Groups

Access control is based on the familiar concept of Users and Groups. Users are defined by their WikiNames. They can then be organized in unlimited combinations by inclusion in one or more user Groups. For convenience, Groups can also be included in other Groups. 

#ManagingUsers
---+++ Managing Users

A user can create an account in TWikiRegistration. The following actions are performed:
   * WikiName and encrypted password are recorded using the password manager if authentication is enabled.
   * A confirmation e-mail is sent to the user.
   * A user profile page with the WikiName of the user is created in the %USERSWEB% web.
   * The user is added to the %USERSWEB%.%WIKIUSERSTOPIC% topic.

The default visitor name is %USERSWEB%.TWikiGuest. This is the non-authenticated user.

#ManagingGroups
---+++ Managing Groups

The following describes the standard TWiki support for groups. Your local TWiki may have an alternate group mapping manager installed. Check with your TWiki administrator if you are in doubt.

Groups are defined by group topics located in the ==%USERSWEB%== web. To create a new group, visit %USERSWEB%.TWikiGroups and enter the name of the new group ending in ==Group== into the "new group" form field. This will create a new group topic with two important settings:
   * ==Set <nop>GROUP = &lt; list of Users and/or Groups &gt;==
   * ==Set <nop>ALLOWTOPICCHANGE = &lt; list of Users and/or Groups &gt;==

The GROUP setting is a comma-separated list of users and/or other groups. Example:
   * ==Set GROUP = !SomeUser, !OtherUser, !SomeGroup==

The ALLOWTOPICCHANGE setting defines who is allowed to change the group topic; it is a comma delimited list of users and groups. You typically want to restrict that to the members of the group itself, so it should contain the name of the topic. This prevents users not in the group from editing the topic to give themselves or others access. For example, for the !MarketingGroup topic write:
   * ==Set <nop>ALLOWTOPICCHANGE = !MarketingGroup==

__%X% Note:__ TWiki has strict formatting rules. Make sure you have a real bullet. (In raw edit it is three or six spaces, an asterisk, and an extra space in front of any access control rule.)

#SuperAdminGroup
---+++ The Super Admin Group

A number of TWiki functions (for example, renaming webs) are only available to administrators. Administrators are simply users who belong to the *SuperAdminGroup*. This is a standard user group, the name of which is defined by {SuperAdminGroup} setting in [[%SCRIPTURLPATH{"configure"}%][configure]]. The default name of this group is the =TWikiAdminGroup=. The system administrator may have chosen a different name for this group if your local TWiki uses an alternate group mapping manager but for simplicity we will use the default name !TWikiAdminGroup in the rest of this topic.

You can create new administrators simply by adding them to the %USERSWEB%.TWikiAdminGroup topic. For example,
   * ==Set <nop>GROUP = !RobertCailliau, !TimBernersLee==
A member of the Super Admin Group has unrestricted access throughout the TWiki, so only trusted staff should be added to this group.

On a large TWiki installation having hundreds or thousands of webs, a single super admin group may not be able to take care of all of those webs. One way to deal with that is to have a super admin group for each web. AutonomousWebs shows how to.

#RestrictingAccess
---++ Restricting Access

You can define who is allowed to read or write to a web or a topic. Note that some plugins may not respect access permissions.

   * Restricting VIEW blocks viewing and searching of content. When you restric VIEW to a topic or web, this also restricts [[VarINCLUDE][INCLUDE]] and [[FormattedSearch][Formatted SEARCH]] from showing the content of the topics.
   * Restricting CHANGE blocks creating new topics, changing topics or attaching files.
   * Restricting RENAME prevents renaming of topics within a web.
   
Note that there is an important distinction between CHANGE access and RENAME access. A user can CHANGE a topic, but thanks to version control their changes cannot be lost (the history of the topic before the change is recorded). However if a topic or web is renamed, that history may be lost. Typically a site will only give RENAME access to administrators and content owners.

#ControllingWeb
---+++ Controlling access to a Web

You can define restrictions on who is allowed to view a <nop>%WIKITOOLNAME% web. You can restrict access to certain webs to selected Users and Groups, by:

   * *authenticating all webs and restricting selected webs:* Topic access in all webs is authenticated, and selected webs have restricted access.
   * *authenticating and restricting selected webs only:* Provide unrestricted viewing access to open webs, with authentication and restriction only on selected webs.

   * You can define these settings in the %WEBPREFSTOPIC% topic, preferable towards the end of the topic:
      * ==Set <nop>DENYWEBVIEW = &lt; comma-delimited list of Users and Groups &gt;==
      * ==Set <nop>ALLOWWEBVIEW = &lt; comma-delimited list of Users and Groups &gt;==
      * ==Set <nop>DENYWEBCHANGE = &lt; comma-delimited list of Users and Groups &gt;==
      * ==Set <nop>ALLOWWEBCHANGE = &lt; comma-delimited list of Users and Groups &gt;==
      * ==Set <nop>DENYWEBRENAME = &lt; comma-delimited list of Users and Groups &gt;==
      * ==Set <nop>ALLOWWEBRENAME = &lt; comma-delimited list of Users and Groups &gt;==

For example, set this to restrict a web to be viewable only by the !MarketingGroup:
   * ==Set <nop>ALLOWWEBVIEW = <nop>%USERSWEB%.MarketingGroup==

If your site allows hierarchical webs, then access to sub-webs is determined from the access controls of the parent web, plus the access controls in the sub-web. So, if the parent web has ==ALLOWWEBVIEW== set, this will also apply to the subweb. Also note that you will need to ensure that the parent web's ==FINALPREFERENCES== does not include the access control settings listed above. Otherwise you will not be able override the parent web's access control settings in sub-webs.

Creation and renaming of sub-webs is controlled by the WEBCHANGE setting on the parent web (or ROOTCHANGE for [[#RootWebs][root webs]]). Renaming is additionally restricted by the setting of WEBRENAME in the web itself.

__Note:__  If you restrict access to the %USERSWEB%, make sure to add the =TWikiRegistrationAgent= so that users can register. Example:
   * ==Set <nop>ALLOWWEBCHANGE = !TWikiAdminGroup, !TWikiRegistrationAgent==

__Note:__  For Web level access rights Setting any of these settings to an empty value has the same effect as not setting them at all. Please note that the documentation of TWiki 4.0 and earlier versions of TWiki 4.1 did not reflect the actual implementation, e.g. an empty ALLOWWEBVIEW does _not_ prevent anyone from viewing the web, and an an empty DENYWEBVIEW does _not_ allow all to view the web.

#ControllingTopic
---+++ Controlling access to a Topic

   * You can define these settings in any topic, preferable towards the end of the topic:
      * ==Set <nop>DENYTOPICVIEW = &lt; comma-delimited list of Users and Groups &gt;==
      * ==Set <nop>ALLOWTOPICVIEW = &lt; comma-delimited list of Users and Groups &gt;==
      * ==Set <nop>DENYTOPICCHANGE = &lt; comma-delimited list of Users and Groups &gt;==
      * ==Set <nop>ALLOWTOPICCHANGE = &lt; comma-delimited list of Users and Groups &gt;==
      * ==Set <nop>DENYTOPICRENAME = &lt; comma-delimited list of Users and Groups &gt;==
      * ==Set <nop>ALLOWTOPICRENAME = &lt; comma-delimited list of Users and Groups &gt;==

For example, set this to restrict a topic to be viewable only by the !MarketingExecGroup:
   * ==Set <nop>ALLOWTOPICVIEW = <nop>%USERSWEB%.MarketingExecGroup==

You may want to allow or deny access to a topic in addition to the ALLOWEB* or DENYWEB* specifies. In that case having + as the first non-space character of ALLOWTOPIC* or DENYTOPIC* has that effect.
For example, the following setting allows view by !MarketingExecGroup in addition to the people ALLOWWEBVIEW allows.
   * ==Set <nop>ALLOWTOPICVIEW = + <nop>%USERSWEB%.MarketingExecGroup==

See "How TWiki evaluates ALLOW/DENY settings" below for more on how ALLOW and DENY interacts.

%X% If the same setting is defined multiple times the last one overrides the previous. They are not OR'ed together.

#OpenUpTopicsInRestrictedWeb
---+++ Allowing public access to specific topics in a restricted web

You may want to completely open up access to a specific topic within a restricted web - allowing access by anybody. There is a special group for that - <nop>%USERSWEB%.AllUsersGroup. The following setting allows view access to the topic by anybody even if they are not authenticated.
   * ==Set <nop>ALLOWTOPICVIEW = <nop>%USERSWEB%.AllUsersGroup==

Alternatively, you can grant access only to authenticated users by <nop>%USERSWEB%.AllAuthUsersGroup. If an unauthenticated user accesses a topic having the following setting, they are asked to authenticate themself.
   * ==Set <nop>ALLOWTOPICVIEW = <nop>%USERSWEB%.AllAuthUsersGroup==

Remember when opening up access to specific topics within a restricted web that other topics in the web - for example, the WebLeftBar - may also be accessed when viewing the topics. The message you get when you are denied access should tell you what topic you were not permitted to access.

As mentioned in the following section, meaning of an empty value set to DENYTOPICVIEW, DENYTOPICCHANGE, and DENYTOPICRENAME has been changed in TWiki 6.0.
To keep those TWiki topics having empty DENYTOPIC<i>OPERAION</i> accessible by everybody, those need to be replaced with
   * ==Set <nop>ALLOWTOPIC<i>OPERATION</i> = <nop>%USERSWEB%.AllUsersGroup==

For that, =tools/eliminate_emptydenytopic= is provided.
After upgrading from pre 6.0 to post 6.0, you need to run it.

---+++ Empty values in access control variables

Setting an empty value to an access control variable is the same as not setting at all:
   * ==Set <nop>ALLOWTOPICVIEW = <nop>==

%X% Since TWiki 4.0 and prior to TWiki 6.0 setting DENYTOPICVIEW, DENYTOPICCHANGE, or DENYTOPICRENAME to an empty value meant "do not deny anyone regardless of the corresponding ALLOWTOPICX", which is no longer the case. Back then, setting an empty value to DENYTOPICX was the only way to open up a topic to everybody in a restricted web. Now that we have !AllUsersGroup and !AllAuthUsersGroup, there is no need for that behaviour, which caused a lot of confusion and debate.

#ControllingAttachments
#SecuringAttachments
---+++ Securing File Attachments

By default, TWiki does not secure file attachments. Without making the following changes to the twiki.conf file, it is possible for anyone who has access to the server to gain access to an attachment if they know the attachment's fully qualified path, even though access to the topic associated with the attachment is secured. This is because attachments are referred to directly by Apache, and are not by default delivered via TWiki scripts. This means that the above instructions for controlling to topics do __not__ apply to attachments unless you make the changes as described below.

An effective way to secure attachments is to apply the same access control settings to attachments as those applied to topics. This security enhancement can be accomplished by instructing the webserver to redirect accesses to attachments via the TWiki =viewfile= script, which honors the TWiki access controls settings to topics. See the notes below for implications.

The preferred method to secure attachments is by editing the =twiki.conf= file to include:

<verbatim>
    ScriptAlias /do          /filesystem/path/to/twiki/bin
    Alias       /pub/TWiki   /filesystem/path/to/twiki/pub/TWiki
    Alias       /pub/Sandbox /filesystem/path/to/twiki/pub/Sandbox
    ScriptAlias /pub         /filesystem/path/to/twiki/bin/viewfile
</verbatim>

__Notes:__
   * It is recommended to use TWiki:TWiki/ApacheConfigGenerator to generate the Apache config file for your TWiki.
   * You will need to restart your Apache server after this change.
   * Images embedded in topics will load slower since attached images will also be delivered by the =viewfile= script. The TWiki web and Sandbox web are excluded for performance reasons.
   * The =viewfile= script sets the mime type based upon file name suffix. Unknown types are served as text/plain which can result in corrupt files. 

#RootWebs
---+++ Controlling who can manage top-level webs

Top level webs are a special case, because they don't have a parent web with a %WEBPREFSTOPIC%. So there has to be a special control just for the root level.
   * You can define these settings in the [[%LOCALSITEPREFS%]] topic, preferable towards the end of the topic:
      * ==Set <nop>DENYROOTCHANGE = &lt; comma-delimited list of Users and Groups &gt;==
      * ==Set <nop>ALLOWROOTCHANGE = &lt; comma-delimited list of Users and Groups &gt;==
Note that you do *not* require =ROOTCHANGE= access to rename an existing top-level web. You just need =WEBCHANGE= in the web itself.

#EvaluatingAllowDeny
---+++ How TWiki evaluates ALLOW/DENY settings

When deciding whether to grant access, TWiki evaluates the following rules in order (read from the top of the list; if the logic arrives at *PERMITTED* or *DENIED* that applies immediately and no more rules are applied). You need to read the rules bearing in mind that VIEW, CHANGE and RENAME access may be granted/denied separately.

   1 If the user is an [[#SuperAdminGroup][administrator]]
      * access is *PERMITTED*.
   1 If DENYTOPIC is set to a list of wikinames
      * people in the list will be *DENIED*.
   1 If DENYTOPIC is set to _empty_ ( i.e. <code>Set DENYTOPIC =</code> )
      * the access control setting is *ignored*. %BR%
        %X% __Attention:__ The spec changed in TWiki-6.0; access was permitted in earlier TWiki releases.
   1 If ALLOWTOPIC is set
      1 people in the list are *PERMITTED*
      1 everyone else is *DENIED*
   1 If DENYWEB is set to a list of wikinames
      * people in the list are *DENIED* access
   1 If ALLOWWEB is set to a list of wikinames
      * people in the list will be *PERMITTED*
      * everyone else will be *DENIED*
   1 If you got this far, access is *PERMITTED*
   
---+++ Allowing web creation/deletion/rename by user mapping manager

There are cases where DENYROOTCHANGE, ALLOWROOTCHANGE, DENYWEBCHANGE, and ALLOWWEBCHANGE, and DENYWEBCHANGE are not capable enough to implement web creation and rename permissions you want.
To cope with such cases, when a new web is created, the =canCreateWeb($cUID, $web)= method of the user mapping manager is called if it exists.
If it returns true, TWiki goes ahead and create the web without checking access control variables.
Similarly, when a web is renamed (deletion is a form of rename), the =canRenameWeb($cUID, $oldWeb, $newWeb)= method of the user mapping manager is called if it exists.
Please read AllowWebCreateByUserMappingManager for more details.

---++ Forbid certain users to do certain actions by configuration

You may have an unruly registered users (e.g. a crawler program) who don't follow the rules while you don't have control over such users.
And the web application container in which TWiki is installed may be managed by somebody else and you don't have tight and quick control.

To cope with such situations, certain users can be forbidden certain scripts by setting ={ForbidUserAction}=.
A good example is worth more than a lengthy explanation, so here it is:
<verbatim>
$TWiki::cfg{ForbidUserAction} = '
    AggresiveCrawler: edit, oops, search;
    ReadOnlyUser:     !view, viewfile;
    TotallyForbidden: !nothing;
';
</verbatim>
In this example:
   * !AggresiveCrawler is forbidden edit, oops, and search scripts.
   * !ReadOnlyUser is permitted view and viewfile but forbidden the others.
      * If a script list is preceded by =!=, only the listed scripts are permitted for the user.
   =!= at the beginning of the list negates the list.
   * !TotallyForbidden is forbidden all actions.%BR%
   Here's the logic. There is no script named nothing, which means all scripts don't match "nothing", hence all scripts are forbidden.
And here are some rules:
   * Spaces, tabs, new lines are ignored
   * It consists of semicolon separated list of per-user specifications
   * A specification consists of a user name, colon, and a comma separated list of scripts
   * A user name needs to be in the canonical form. In most cases the canonical user name is the same as the wiki name. But if you are using non-standard user mapping, the canonical user name of a user is different from the wiki name.

---++ User masquerading

There are cases where it's handy to access TWiki on behalf of somebody else retaining a trace of your real identity rather than completely becoming a different user.
We call it user masquerading.
TWiki provides a framework to implement that.
Please read UserMasquerading for more information.

This is an advanced feature and not many TWiki sites are using, but there is a part in the following section mentioning it, it's mentioned here.

---++ Dynamic access control

There are pitfalls and [[#AvoidingVulnerability][you need to harden your web]] to avoid unexpected access.
Before using this feature, please read this entire section through carefully.

You may want to restrict access dynamically -- based on topic name, a form field value, or some combination of factors.
To cope with such situations, the dynamic access control mechanism is provided.
If you set =DYNAMIC_ACCESS_CONTROL= 'on' at !WebPreferences of the web, [[TWikiVariables][TWiki variables]] in access control variables mentioned above are expanded.

---+++ Example 1 - restriction based on topic name

Let's assume you need to restrict changes only to the !CroniesGroup members except with topics whose name ends with Public, which need be changed by anybody. That is achieve by the following settings on !WebPrefences.

<verbatim>
   * Set DYNAMIC_ACCESS_CONTROL = on
   * Set ALLOWWEBCHANGE = %IF{"'%CALCULATE{$SUBSTRING(%TOPIC%, -6, 6)}%' = 'Public'" then="%WIKINAME%" else="CroniesGroup"}%
</verbatim>

---+++ Example 2 - restriction based on form field

Let's assume:
   * a web storing requests on topics whose name starts with !ReqEnt
   * Each request topic has a form field "Requestor", which has the wiki name of the requestor
   * Users can view only requests they created
   * The members of the !SupportGroup mail group can view all requests
That is achieve by the following settings on !WebPreferences.

<verbatim>
   * Set DYNAMIC_ACCESS_CONTROL = on
   * Set ALLOWWEBVIEW = %IF{"'%CALCULATE{$SUBSTRING(%TOPIC%, 1, 6)}%' = 'ReqEnt' and '%FORMFIELD{Requestor}%' != '%WIKINAME%'" then="SupportGroup" else="%WIKINAME%"}%
</verbatim>

Specifically the following access control variables are subject to TWiki variable expansion in their values.
   * DENYTOPIC* (e.g. DENYTOPICVIEW, DENYTOPICCHANGE)
   * ALLOWTOIPC*
   * DENYWEB*
   * ALLOWWEB*
DENYROOT* and ALLOWROOT* are not subject to variable expansion.
Because there has been no good use cases presented.

---+++ Dynamic access control in accessing a different web's topic

Let's assume !WebA has the following lines on !WebPreferences.
<verbatim>
   * Set DYNAMIC_ACCESS_CONTROL = on
   * Set MEMBERS = JaneSmith, JoeSchmoe
   * Set ALLOWWEBVIEW = %MEMBERS%
</verbatim>
This is not a good way to use dynamic access control but it does restrict access only to those listed in MEMBERS.
However, access control doesn't work as expected when !WebA.TopicB is accessed from !WebC.TopicD by =%<nop>INCLUDE{WebA.TopicB}%= or other variables.
This is because =%<nop>MEMBERS%= is defined in !WebA and may have a different value in other webs.

You may think the following lines cheat the access control on !WebA but actually not.
<verbatim>
   * Set MEMBERS = %WIKINAME%
%INCLUDE{WebA.TopicB}%
</verbatim>
This is because when a topic (e.g. !WebC.TopicD) is accessed from browser and the topic refers to another topic in a different web (e.g. !WebA.TopicB) and the different web employs dynamic access control, access to another topic is defined being on the safer side.

---+++ Topic level dynamic access control

On a topic, it's possible to use a variable defined on the topic for topic level access restriction. E.g.
<pre>
   * <nop>Set MEMBERS = JaneSmith, JoeSchmoe
   * <nop>Set ALLOWTOPICVIEW = %<nop>MEMBERS%
</pre>
[This is not a good way to use dynamic access control

---+++ Dynamic access control and user masquerading

Your user mapping handler may be providing the UserMasquerading feature.
In that case, you expect dynamic access control to just work when user masquerading is in effect.
Otherwise, you cannot test if your dynamic access control configuration is working as expected on your own.

Dynamic access control does work as expected even if user masquerading is in effect. For that, the following things are happening under the hood.

Let's think about Example 2 mentioned above.
When you masquerading as !SomebodyElse, you need to be able to see !SomebodyElse's requests only.
In the access control setting, a form field value is compared with %<nop>WIKINAME%.
While user masquerading is in effect, your wiki name is !YourNameOnBehalfOfSomebodyElse. It cannot match the form field value.

To make dynamic access control work under these circumstances, variable expansion for dynamic access control is skewed as follows.
Specifically, the following variables are expanded to the value of !SomeboyElse's rather than !YourNameOnBehalfOfSomebodyElse's.
   * WIKINAME
   * USERNAME
   * WIKIUSERNAME

#AvoidingVulnerability
---+++ Avoiding vulnerability

By default, user level preferences are read before web level preferences.
This means a user can set a preferences variable at the user level and finalise it.
To prevent this sort of attack, you need to harden your web or site by disabling user preferences by e.g. having the following line on =lib/LocalSite.cfg=
<verbatim>
$TWiki::cfg{DemoteUserPreferences}= 1;
</verbatim>
and having the following line on your !WebPreferences and then finalise =DENYUSERPREFEENCES=.
<pre>
   * <nop>Set DENYUSERPREFEENCES = all
</pre>
Please read TWikiVariables#ControllingUserLevelPrefsOverride for details.

Again by default, [[TWikiVariables#PredefinedVariables][predefined variables]] such as =%<nop>IF{...}%= can be overridden by preferences variables.
If user preferences are disabled, ordinary users cannot attack using user preferences, but topic level preferences may cause unexpected consequences.
As such, all predefined variables need to be made un-overridable by having the following line on !WebPreferences and then finalise =OVERRIDABLEPREDEFINEDVARIABLES=.
<pre>
   * <nop>Set OVERRIDABLEPREDEFINEDVARIABLES =
</pre>
Please read TWikiVariables#PredefinedVariables for details.

---+++ Disabling dynamic access control

You may not be comfortable with dynamic access control because it may slow things down. Or you may not want to be bothered by questions raised by users about it. If so, you can disable it by setting DYNAMIC_ACCESS_CONTROL 'off' and then finalizing at the local site level. (cf. TWikiVariables#Setting_Preferences_Variables)

---++ Access control and INCLUDE

ALLOWTOPICVIEW and ALLOWTOPICCHANGE only applies to the topic in which the settings are defined. If a topic A includes another topic B, topic A does not inherit the access rights of the included topic B.

Examples: Topic A includes topic B

   * If the included topic B has ALLOWTOPICCHANGE set to block editing for a user, it does not prevent editing the including topic A.
   * If the included topic B has ALLOWTOPICVIEW set to block view for a user, the user can still view topic A but he cannot see the included topic B. He will see a message _No permission to view B_ 

---++ Customizing "access denied" message

When access is denied, a page as follows is displayed:

%ATTACHURL%/access-denied.png

You may want to customize the passage annotated in the red rectangle.
For example, with a web restricting access, you may want to show the link to an access request form.

You can achieve that by setting =TOPIC_ACCESS_CONTACT= varialbe on !WebPreferences. e.g.
<pre>
   * <nop>Set TOPIC_ACCESS_CONTACT = If you need to access this site, please apply [[Main.AccessForm][here]]
</pre>
Please note that setting it on a topic other than !WebPreferences does not take effect.
This is a limitation of the current implementation.

---++ Custom user/group notations

You can have [[CustomUserGroupNotations][custom user/group notations]] such as =USER:<i>userid</i>= and =LDAPGROUP:<i>group-name</i>= and use them for access control. For example:
<pre>
   * <nop>Set ALLOWWEBCHANGE = USER:buzz, LDAPGROUP:foo-bar
</pre>
In a large organization, TWiki may need to depend on user and group data provided by its infrastructure.
Custom user/group notations are handy in such situations though it's not trivial to implement.
Please read [[CustomUserGroupNotations][here]] for details.

#QuickRecipes
---++ Access Control quick recipes

#RestrictWholeTWikiSite
---+++ Restrict Access to Whole TWiki Site

In a firewalled TWiki, e.g. an intranet wiki or extranet wiki, you want to allow only invited people to access your TWiki. There are three options:

__1. Install TWiki Behind Firewall:__

The firewall takes care of giving access to TWiki to authorized people only. This is a typical setup for a company wiki. As for TWiki configuration, no special setup is needed.

__2. Extranet TWiki Using Template Login:__

All TWiki content (pages and attachments) need to be access controlled. The Template Login allows users to login and logout. Only logged in users can access TWiki content.

__Configuration:__ Follow the default setup, then change these configure settings:

   * Secure attachments [[#SecuringAttachments][as documented]]. The TWiki:TWiki.ApacheConfigGenerator is useful to get the setting right.
   * Require authentication for all TWiki scripts except =backuprestore=, =configure=, =login=, =logon= and =resetpasswd= with the following configure setting:
     %BR% =$TWiki::cfg{AuthScripts} = 'attach, changes, edit, manage, oops, preview, rdiff, rdiffauth, register, rename, rest, save, search, twiki_cgi, upload, statistics, view, viewauth, viewfile';=
   * When you install additional plugins make sure to add scripts they might introduce also to =twiki/bin= also to the ={AuthScripts}= configure setting.
     %BR% __Attention:__ Some scripts of additional plugins might not be aware of TWiki's template login. Test all new scripts with a non-authenticated user!

__3. Extranet TWiki Using Apache Login:__

All TWiki content (pages and attachments) need to be access controlled. The Apache Login does not offer a logout; typically the browser needs to be restarted to logout. Only logged in users can access TWiki content.

__Configuration:__ Enable [[TWikiUserAuthentication#ApacheLogin][user authentication with ApacheLogin]] and lock down access to the whole =twiki/bin= and =twiki/pub= directories to all but valid users. In the Apache config file for TWiki (=twiki.conf= or =.htaccess=), replace the =&lt;FilesMatch "(attach|edit|...= section with this:

<verbatim>
<FilesMatch ".*">
       require valid-user
</FilesMatch>
</verbatim>

__Notes:__

   * In all three options, content can be restricted selectively with ALLOWWEBVIEW and other access control settings documented above. See also the next quick recipe.
   * In the extranet setup, someone with access to the site needs to register new users. If you still want public users to be able to register automatically follow TWiki:TWiki.RegisterOnViewRestrictedSite.

---+++ Authenticate and Restrict Selected Webs Only

Use the following setup to provide unrestricted viewing access to open webs, with authentication only on selected webs. Requires TWikiUserAuthentication to be enabled.

   1. *Restrict* view access to selected Users and Groups. Set one or both of these variables in its %WEBPREFSTOPIC% topic:
      * ==Set <nop>DENYWEBVIEW = &lt; list of Users and Groups &gt;==
      * ==Set <nop>ALLOWWEBVIEW = &lt; list of Users and Groups &gt;==
      * __Note:__ =DENYWEBVIEW= is evaluated before =ALLOWWEBVIEW=. Access is denied if the authenticated person is in the =DENYWEBVIEW= list, or not in the =ALLOWWEBVIEW= list. Access is granted if =DENYWEBVIEW= and =ALLOWWEBVIEW= are not defined.

---+++ Hide Control Settings

__%T% Tip:__ To hide access control settings from normal browser viewing, you can put them into the _topic preference settings_ by clicking the link =Edit topic preference settings= under =More topic actions= menu. Preferences set in this manner are not visible in the topic text, but take effect nevertheless. Access control settings added as topic preference settings are stored in the topic meta data and they override settings defined in the topic text.

Alternatively, place them in HTML comment markers, but this exposes the access setting during ordinary editing.

<blockquote>
==&lt;!--== <br />
==&nbsp;  * Set <nop>DENYTOPICCHANGE = %USERSWEB%.<nop>SomeGroup== <br />
==--&gt;==
</blockquote>

---+++ Obfuscating Webs

Another way of hiding webs is to keep them hidden by not publishing the URL and by preventing the ==all webs== search option from accessing obfuscated webs. Do so by enabling the ==NOSEARCHALL== variable in %WEBPREFSTOPIC%:
   * ==Set <nop>NOSEARCHALL = on==

This setup can be useful to hide a new web until content its ready for deployment, or to hide view access restricted webs.

__%X% Note:__ Obfuscating a web without view access control is *very* insecure, as anyone who knows the URL can access the web.

---+++ Read-only Skin Mode

It is possible to turn the PatternSkin and TopMenuSkin into read-only mode by removing the edit and attach controls (links and buttons). This is mainly useful if you have TWiki application pages or dashboards where you do not want regular users to change content. The read-only skin mode is not a replacement for access control; you can use it in addition to access control. Details at [[PatternSkinCustomization#ReadOnlySkinMode]].

#CfgAccessTopic
---++ Configuring access control for topics of a certain name in all webs

You may need to restrict access to topics of a certain name in all webs.
For example, there might be an add-on refering to a certain topic of all webs.
And the add-on does things only administrators are supposed to do.
In that case, change to the topic needs to be restricted only to administrators
and must not be overridable.

Let's say there is !AutomationAddOn which refers to !WebAutomation of all webs.
And !WebAutomation needs to be modifable only by administrators.
That can be achieved by the following configuration.
<verbatim>
$TWiki::cfg{Access}{Topic}{WebAutomation} = {
    DENYCHANGE => 'Main.AllUsersGroup',
};
</verbatim>

In addition to =ALLOWCHANGE=, you can sepcify =DENYCHANGE=, =ALLOWVIEW=, =DENYVIEW=, =ALLOWRENAME=, and =DENYRENAME= as follows.
<verbatim>
$TWiki::cfg{Access}{Topic}{SpecialTopic} = {
    DENYVIEW  => 'JoeSchmoe',
    ALLOWVIEW => 'FooGroup',
};
</verbatim>

=$TWiki::cfg{Access}{Topic}{<i>TOPICNAME</i>}= has precedence over =DENYTOPIC*= and =ALLOWTOPIC*=.
For example, if the configuration for !WebAutomation is there as above, there is no way to allow non-adminsitrators to change the !WebAutomation topic of any web.

As a way to configure access control, this may look crude.
The reason why configured this way is that this can be part of plugin/add-on/contrib's configuration.
For example, =Config.spec= of !AutomationAddOn would have the following lines, with which proper access control to !WebAutomation topics is implemented without the administrator knowing it.
<verbatim>
$TWiki::cfg{Access}{Topic}{WebAutomation} = {
    DENYCHANGE => 'Main.AllUsersGroup',
};
</verbatim>

%STOPINCLUDE%

__Related Topics:__ AdminDocumentationCategory, TWikiUserAuthentication, AllowWebCreateByUserMappingManager, AutonomousWebs, UserMasquerading, CustomUserGroupNotations, TWiki:TWiki.TWikiAccessControlSupplement

-- __Contributors:__ TWiki:Main.PeterThoeny, TWiki:Main.MikeMannix, TWiki:Main.CrawfordCurrie

%META:FILEATTACHMENT{name="access-denied.png" attachment="access-denied.png" attr="h" comment="" date="1366771092" path="access-denied.png" size="32745" user="TWikiContributor" version="1.1"}%
@


1.43
log
@buildrelease
@
text
@d1 1
a1 1
%META:TOPICINFO{author="TWikiContributor" date="1427699188" format="1.1" version="43"}%
d86 2
d141 4
d228 1
a228 1
---+++ Allowing web creation by user mapping manager
d230 2
a231 2
There are cases where DENYROOTCHANGE, ALLOWROOTCHANGE, DENYWEBCHANGE, and ALLOWWEBCHANGE, and DENYWEBCHANGE are not capable enough to implement web creation permission you want.
To cope with such cases, when a new web is created, the =canCreateWeb($cUID, $web)= method of the user mapping manager is called if the method exists.
d233 1
d536 1
a536 1
__Related Topics:__ AdminDocumentationCategory, TWikiUserAuthentication, AllowWebCreateByUserMappingManager, UserMasquerading, CustomUserGroupNotations, TWiki:TWiki.TWikiAccessControlSupplement
@


1.42
log
@buildrelease
@
text
@d1 1
a1 1
%META:TOPICINFO{author="TWikiContributor" date="1404432129" format="1.1" version="42"}%
d229 27
d408 1
a408 1
   * <nop>Set ALLOWWEBCHANGE = UID:buzz, LDAPGROUP:foo-bar
@


1.41
log
@buildrelease
@
text
@d1 1
a1 1
%META:TOPICINFO{author="TWikiContributor" date="1381314519" format="1.1" version="41"}%
d19 1
d23 1
a23 1
      * Edits can be undone by the administrator (per default a member of %USERSWEB%.TWikiAdminGroup; see [[#ManagingGroups]]).
d25 1
d27 1
d29 1
a29 1
   * Avoid creating view-only Users (if you can read it, you should be able to contribute to it).
d32 1
d240 1
a240 2
*This feature is regarded experimental.*
There are pitfalls and [[#Vulnerability][vulnerability]].
d249 1
a249 1
Let's assume you need to restrict changes only to the !CroniesGroup members excep with topics whose name ends with Public, which need be changed by anybody. That is achieve by the following settings on !WebPrefences.
d260 1
a260 1
   * Each request topic has a form field "Requstor", which has the wiki name of the requestor
d263 1
a263 1
That is achieve by the following settings on !WebPrefences.
d286 1
a286 1
This is not a good way to use dynamic access control but it does restrict accessonly to those listed in MEMBERS.
d325 14
a338 1
---+++ Vulnerability
d340 7
a346 3
It's possible to redefine function tags such as %<nop>IF{...}% in your personal preferences.
In a future release of TWiki, a way to prevent function tags from being overridden by personal preferences will be provied.
But until then, you need to be well aware of this vulnerability.
d462 38
d505 2
a506 1
%META:FILEATTACHMENT{name="access-denied.png" attachment="access-denied.png" attr="" comment="" date="1366771092" path="access-denied.png" size="32745" user="TWikiContributor" version="1.1"}%
@


1.40
log
@buildrelease
@
text
@d1 1
a1 1
%META:TOPICINFO{author="TWikiContributor" date="1347405466" format="1.1" version="40"}%
d4 1
d16 3
a18 1
Open, freeform editing is the essence of WikiCulture - what makes TWiki different and often more effective than other collaboration tools. For that reason, it is strongly recommended that decisions to restrict read or write access to a web or a topic are made with great care - the more restrictions, the less Wiki in the mix. Experience shows that _unrestricted write access_ works very well because:
d29 2
a30 1
%INCLUDE{SitePermissions}%
d32 1
a32 1
__Note:__ Above table comes from SitePermissions
d135 6
a140 1
Remember when opening up access to specific topics within a restricted web that other topics in the web - for example, the WebLeftBar - may also be accessed when viewing the topics. The message you get when you are denied access should tell you what topic you were not permitted to access.
d142 2
a143 1
*Be careful* with empty values for any of these.
d145 2
a146 1
   * ==Set <nop>ALLOWTOPICVIEW = <nop>== <br />This means the same as not setting it at all. (This was documented wrong in versions 4.0.X, 4.1.0 and 4.1.1)
d148 1
a148 1
   * ==Set <nop>DENYTOPICVIEW = <nop>== <br />Since TWiki 4.0 this means _do not deny anyone the right to view this topic_. If DENYTOPICVIEW is set to an empty value anyone has access even if ALLOWTOPICVIEW or ALLOWWEBVIEW is defined. This allows to have very restrictive default access rights to an entire web and still allow individual topics to have more open access.
d150 3
a152 1
The same rules apply to ALLOWTOPICCHANGE/DENYTOPICCHANGE and APPLYTOPICRENAME/DENYTOPICRENAME. Setting ALLOWTOPICCHANGE or ALLOWTOPICRENAME to en empty value means the same as not defining it. Setting DENYTOPICCHANGE or DENYTOPICRENAME to an empty value means that anyone can edit or rename the topic.
d154 4
a157 1
%X% If the same setting is defined multiple times the last one overrides the previous. They are not OR'ed together.
d159 2
a160 1
%X% _The setting to an empty has caused confusion and great debate and it has been decided that the empty setting syntax will be replaced by something which is easier to understand in a later version of TWiki. A method to upgrade will be provided. Please read the release notes carefully when you upgrade._
d162 1
a162 1
See "How TWiki evaluates ALLOW/DENY settings" below for more on how ALLOW and DENY interacts.
d205 3
a207 3
   1 If DENYTOPIC is set to _empty_ ( i.e. <tt>Set DENYTOPIC =</tt> )
      * access is *PERMITTED* _i.e_ no-one is denied access to this topic.%BR%
        %X% __Attention:__ Use this with caution. This is __deprecated__ and will likely change in the next release.
d218 114
d341 26
d444 1
a444 1
__Related Topics:__ AdminDocumentationCategory, TWikiUserAuthentication, TWiki:TWiki.TWikiAccessControlSupplement
d447 1
@


1.39
log
@buildrelease
@
text
@d1 1
a1 1
%META:TOPICINFO{author="TWikiContributor" date="1310777500" format="1.1" version="39"}%
d153 1
a153 1
An effective way to secure attachments is to apply the same access control settings to attachments as those applied to topics. This security enhancement can be accomplished by instructing the webserver via Apache's =mod_rewrite= module to redirect accesses to attachments via  the TWiki =viewfile= script, which honors the TWiki access controls settings to topics.
d158 4
a161 6
    ScriptAlias /twiki/bin/ /filesystem/path/to/twiki/bin/
    Alias /twiki/pub/       /filesystem/path/to/twiki/pub/

    RewriteEngine on
    RewriteCond %{REQUEST_URI} !^/+twiki/+pub/+(TWiki|Sandbox)/+.+
    RewriteRule ^/+twiki/+pub/+(.*)$  /twiki/bin/viewfile/$1 [L,PT]
d165 1
a165 1
   * You can use TWiki:TWiki/ApacheConfigGenerator to generate the Apache config file for TWiki.
a167 1
   * As an alternative to editing the =twiki.conf= file used by Apache, you can make the same change directly to the =.htaccess= file in the =/twiki/bin= directory.
d213 1
d216 23
a238 1
For a firewalled TWiki, e.g. an intranet wiki or extranet wiki, you want to allow only invited people to access your TWiki. In this case, enable [[TWikiUserAuthentication#ApacheLogin][user authentication with ApacheLogin]] and lock down access to the whole =twiki/bin= and =twiki/pub= directories to all but valid users. In the Apache =.htaccess= file or the appropriate =.conf= file, replace the =&lt;FilesMatch "(attach|edit|...= section with this:
d246 1
a246 5
If needed, you can further restrict access to selected webs with ALLOWWEBVIEW and other access control settings.

__Note:__ With this configuration, someone with access to the site needs to register new users.

---+++ Authenticate all Webs and Restrict Selected Webs
d248 2
a249 8
Use the following setup to authenticate users for topic viewing in all webs and to restrict access to selected webs. Requires TWikiUserAuthentication to be enabled.

   1. Set =require valid-user= on your =view= script in .htaccess or the appropriate Apache .conf file. As of 4.x, this looks like: =FilesMatch "(attach|edit|manage|rename|save|view|upload|mail|logon|.*auth).*"= (normally =view= is not in that list).
   1. *Restrict* view access to selected Users and Groups. Set one or both of these variables in its %WEBPREFSTOPIC% topic:
      * ==Set <nop>DENYWEBVIEW = &lt; list of Users and Groups &gt;==
      * ==Set <nop>ALLOWWEBVIEW = &lt; list of Users and Groups &gt;==
      * __Note:__ =DENYWEBVIEW= is evaluated before =ALLOWWEBVIEW=. Access is denied if the authenticated person is in the =DENYWEBVIEW= list, or not in the =ALLOWWEBVIEW= list. Access is granted if =DENYWEBVIEW= and =ALLOWWEBVIEW= are not defined.
   1. If you still want public users to be able to register automatically follow TWiki:TWiki.RegisterOnViewRestrictedSite.
a271 1

@


1.38
log
@buildrelease
@
text
@d1 1
a1 1
%META:TOPICINFO{author="TWikiContributor" date="1257549712" format="1.1" version="38"}%
d47 1
a47 1
   * A user home page with the WikiName of the user is created in the %USERSWEB% web.
d57 1
a57 1
Groups are defined by group topics located in the ==%USERSWEB%== web. To create a new group, visit  %USERSWEB%.TWikiGroups and enter the name of the new group ending in ==Group== into the "new group" form field. This will create a new group topic with two important settings:
d62 1
a62 1
   * ==Set GROUP = %USERSWEB%.<nop>SomeUser, %USERSWEB%.<nop>OtherUser, %USERSWEB%.<nop>SomeGroup==
d64 2
a65 2
The ALLOWTOPICCHANGE setting defines who is allowed to change the group topic; it is a comma delimited list of users and groups. You typically want to restrict that to the members of the group itself, so it should contain the name of the topic. This prevents users not in the group from editing the topic to give themselves or others access. For example, for the <nop>KasabianGroup topic write:
   * ==Set <nop>ALLOWTOPICCHANGE = %USERSWEB%.<nop>KasabianGroup==
d67 1
a67 1
__%X% Note:__ TWiki has strict formatting rules. Make sure you have three spaces, an asterisk, and an extra space in front of any access control rule.
d75 1
a75 1
   * ==Set <nop>GROUP = <nop>%USERSWEB%.ElizabethWindsor, <nop>%USERSWEB%.TonyBlair==
d105 3
d113 1
a113 1
      * ==Set <nop>ALLOWWEBCHANGE = !TWikiAdminGroup, !TWikiRegistrationAgent==
d128 3
d177 1
a177 1
   * You can define these settings in the %USERSWEB%.%TWIKIPREFSTOPIC% topic, preferable towards the end of the topic:
a215 9
---+++ Obfuscating Webs

Another way of hiding webs is to keep them hidden by not publishing the URL and by preventing the ==all webs== search option from accessing obfuscated webs. Do so by enabling the ==NOSEARCHALL== variable in %WEBPREFSTOPIC%:
   * ==Set <nop>NOSEARCHALL = on==

This setup can be useful to hide a new web until content its ready for deployment, or to hide view access restricted webs.

__%X% Note:__ Obfuscating a web without view access control is *very* insecure, as anyone who knows the URL can access the web.

d262 14
@


1.37
log
@buildrelease
@
text
@d1 1
a1 2
%META:TOPICINFO{author="TWikiContributor" date="1236112853" format="1.1" version="37"}%
%STARTINCLUDE%
d142 2
a143 1
---+++ Controlling access to Attachments
d145 1
a145 1
Attachments are referred to directly, and are not normally indirected via TWiki scripts. This means that the above instructions for access control will _not_ apply to attachments. It is possible that someone may inadvertently publicise a URL that they expected to be access-controlled.
d147 3
a149 1
The easiest way to apply the same access control rules for attachments as apply to topics is to use the Apache =mod_rewrite= module, and configure your webserver to redirect accesses to attachments to the TWiki =viewfile= script. For example,
d156 2
a157 2
    RewriteCond %{REQUEST_URI} !^/+twiki/+pub/+TWiki/+.+
    RewriteRule ^/+twiki/+pub/+([^/]+)/+((([^/]+)/+)+)(.+) /twiki/bin/viewfile/$1/$4?filename=$5 [L,PT]
d160 6
a165 3
That way all the controls that apply to the topic also apply to attachments to the topic. Other types of webserver have similar support.

__Note:__ Images embedded in topics will load much slower since each image will be delivered by the =viewfile= script.
@


1.36
log
@buildrelease
@
text
@d1 1
a1 1
%META:TOPICINFO{author="TWikiContributor" date="1183870141" format="1.1" version="36"}%
d37 1
d42 1
d79 1
d90 1
d115 1
d142 1
d171 1
d202 1
@


1.35
log
@buildrelease
@
text
@d1 1
a1 1
%META:TOPICINFO{author="TWikiContributor" date="1183870141" format="1.1" version="35"}%
d131 3
a133 1
%X% _The setting to an empty has caused confusion and great debate and it has been decided that the empty setting syntax will be replaced by something which is easier to understand in the 4.2 version of TWiki. A method to upgrade will be provided. Please read the release notes carefully when you upgrade._
d185 9
d242 1
a242 1
__%T% Tip:__ To hide access control settings from normal browser viewing, you can put them into the topic-local settings. You can access those settings via the "More" screen, as explained in [[TWikiVariables#Setting_Preferences_Variables][TWikiVariables]].
@


1.34
log
@buildrelease
@
text
@d1 1
a1 2
%META:TOPICINFO{author="TWikiContributor" date="1172865279" format="1.1" version="34"}%
%TOC%
d3 1
a3 2

---# TWiki Access Control
d11 2
d20 1
a20 1
      * Edits can be undone by the administrator (per default a member of %MAINWEB%.TWikiAdminGroup; see [[#ManagingGroups]]).
d46 2
a47 2
   * A user home page with the WikiName of the user is created in the %MAINWEB% web.
   * The user is added to the %MAINWEB%.%WIKIUSERSTOPIC% topic.
d49 1
a49 1
The default visitor name is %MAINWEB%.TWikiGuest. This is the non-authenticated user.
d56 1
a56 1
Groups are defined by group topics located in the ==%MAINWEB%== web. To create a new group, visit  %MAINWEB%.TWikiGroups and enter the name of the new group ending in ==Group== into the "new group" form field. This will create a new group topic with two important settings:
d61 1
a61 1
   * ==Set GROUP = %MAINWEB%.<nop>SomeUser, %MAINWEB%.<nop>OtherUser, %MAINWEB%.<nop>SomeGroup==
d64 1
a64 1
   * ==Set ALLOWTOPICCHANGE = %MAINWEB%.<nop>KasabianGroup==
d73 2
a74 2
You can create new administrators simply by adding them to the %MAINWEB%.TWikiAdminGroup topic. For example,
   * ==Set <nop>GROUP= <nop>%MAINWEB%.ElizabethWindsor, <nop>%MAINWEB%.TonyBlair==
d81 1
a81 1
   * Restricting VIEW blocks viewing and searching of content.
d102 1
a102 1
If your site allows hierarchical webs, then access to sub-webs is determined from the access controls of the parent web, plus the access controls in the sub-web. So, if the parent web has ==ALLOWWEBVIEW== set, this will also apply to the subweb.
d106 3
d158 1
a158 1
   * You can define these settings in the %MAINWEB%.%TWIKIPREFSTOPIC% topic, preferable towards the end of the topic:
d195 14
d213 1
d217 2
a218 1
      * __Note:__ =DENYWEBVIEW= is evaluated before =ALLOWWEBVIEW=. Access is denied if the authenticated person is in the =DENYWEBVIEW= list, or not in the =ALLOWWEBVIEW= list. Access is granted in case =DENYWEBVIEW= and =ALLOWWEBVIEW= is not defined.
d227 1
a227 1
      * __Note:__ =DENYWEBVIEW= is evaluated before =ALLOWWEBVIEW=. Access is denied if the authenticated person is in the =DENYWEBVIEW= list, or not in the =ALLOWWEBVIEW= list. Access is granted in case =DENYWEBVIEW= and =ALLOWWEBVIEW= is not defined.
d237 1
a237 1
==&nbsp;  * Set <nop>DENYTOPICCHANGE = %MAINWEB%.<nop>SomeGroup== <br />
@


1.33
log
@buildrelease
@
text
@d1 1
a1 1
%META:TOPICINFO{author="TWikiContributor" date="1160701186" format="1.1" version="33"}%
d20 1
a20 1
      * Edits can be undone by the %MAINWEB%.TWikiAdminGroup (the default administrators group; see [[#ManagingGroups]]).
d54 3
a56 1
Groups are defined by group topics located in the ==%MAINWEB%== web, such as the %MAINWEB%.TWikiAdminGroup. To create a new group, visit  %MAINWEB%.TWikiGroups and enter the name of the new group ending in ==Group== into the "new group" form field. This will create a new group topic with two important settings:
d63 2
a64 2
The ALLOWTOPICCHANGE setting defines who is allowed to change the group topic; it is a comma delimited list of users and groups. You typically want to restrict that to the members of the group itself, so it should contain the name of the topic. This prevents users not in the group from editing the topic to give themselves or others access. For example, for the <nop>TWikiAdminGroup topic write:
   * ==Set ALLOWTOPICCHANGE = %MAINWEB%.<nop>TWikiAdminGroup==
d71 3
a73 1
By mistyping a user or group name in the settings, it's possible to lock a topic so that no-one can edit it from a browser. To avoid this, add the WikiNames of registered administrators to the super admin group topic called ==TWikiAdminGroup==. The name of this topic is defined by the {SuperAdminGroup} [[%SCRIPTURLPATH{"configure"}%][configure]] setting. Example group setting:
d75 1
d83 3
d99 4
d104 3
a106 5
*Be careful* with empty values for any of these. In older versions of TWiki,
   * ==Set <nop>ALLOWWEBVIEW = <nop>==
meant the same as not setting it at all. However since TWiki Dakar release, it means _allow noone access_ i.e. prevent anyone from viewing the web. Similarly
   * ==Set <nop>DENYWEBVIEW = <nop>==
now means _do not deny anyone the right to view this web_. See "How TWiki evaluates ALLOW/DENY settings" below for more on this.
d115 2
d120 11
a130 5
*Be careful* with empty values for any of these. In older versions of TWiki,
   * ==Set <nop>ALLOWTOPICVIEW = <nop>==
meant the same as not setting it at all. However since TWiki Dakar release, it means _allow no-one access_ i.e. prevent anyone from viewing the topic. Similarly
   * ==Set <nop>DENYTOPICVIEW = <nop>==
now means _do not deny anyone the right to view this topic_. See "How TWiki evaluates ALLOW/DENY settings" below for more on this.
d151 3
a153 1
---+++ Controlling who can create top-level webs
d162 3
a164 2
When deciding whether to grant access, TWiki evaluates the following rules in order (read from the top of the list; if the logic arrives at *PERMITTED* or *DENIED* that applies immediately and no more rules are applied). You need to read the rules bearing in mind that VIEW and CHANGE access may be granted/denied separately.
   1 If the user is a [[#SuperAdminGroup][super-user]]
d169 2
a170 1
      * access is *PERMITTED* _i.e_ no-one is denied access to this topic
d174 1
a174 2
         * Note that this means that setting ALLOWTOPIC to empty _denies access to everyone except admins_ (unless DENYTOPIC is also set to empty, as described above)
   1 If DENYWEB is set to a list of wikiname
a178 1
         * Note that setting ALLOWWEB to empty _denies access to everyone except admins_
@


1.32
log
@buildrelease
@
text
@d1 1
a1 1
%META:TOPICINFO{author="TWikiContributor" date="1131718988" format="1.1" version="32"}%
d69 1
a69 1
By mistyping a user or group name in the settings, it's possible to lock a topic so that no-one can edit it from a browser. To avoid this, add the WikiNames of registered administrators to the super admin group topic called ==TWikiAdminGroup==. The name of this topic is defined by the {SuperAdminGroup} configure setting. Example group setting:
a77 3
   * Restricting RENAME controls who is allowed to rename, move or delete a topic.
      * To rename, move or delete a topic, the user also also needs VIEW and CHANGE permission.  They also need CHANGE access to change references in any referring topics (though the rename can proceed without this access), and CHANGE access to the target topic.
   * Restricting MANAGE controls access to certain management functions, such as 'create web'. It must be set in the %TWIKIWEB% web.
d81 1
a81 1
You can define restrictions of who is allowed to view a <nop>%WIKITOOLNAME% web. You can restrict access to certain webs to selected Users and Groups, by:
a90 2
      * ==Set <nop>DENYWEBRENAME = &lt; comma-delimited list of Users and Groups &gt;==
      * ==Set <nop>ALLOWWEBRENAME = &lt; comma-delimited list of Users and Groups &gt;==
d100 1
a100 1
   * You can define these settings in the %WEBPREFSTOPIC% topic, preferable towards the end of the topic:
a104 2
      * ==Set <nop>DENYTOPICRENAME = &lt; comma-delimited list of Users and Groups &gt;==
      * ==Set <nop>ALLOWTOPICRENAME = &lt; comma-delimited list of Users and Groups &gt;==
d127 1
a127 1
</verbatim
d133 7
d142 1
a142 1
When deciding whether to grant access, TWiki evaluates the following rules in order (read from the top of the list; if the logic arrives at *PERMITTED* or *DENIED* that applies immediately and no more rules are applied). You need to read the rules bearing in mind that VIEW, CHANGE and RENAME access may be granted/denied separately.
d192 3
a194 1
__%T% Tip:__ To hide access control settings from normal browser viewing, place them in HTML comment markers.
@


1.31
log
@buildrelease
@
text
@d1 1
a1 1
%META:TOPICINFO{author="TWikiContributor" date="1131718988" format="1.1" version="31"}%
d128 2
a129 2
  ScriptAlias /twiki/bin/ /filesystem/path/to/twiki/bin/
  Alias /twiki/pub/       /filesystem/path/to/twiki/pub/
d131 4
a134 4
  RewriteEngine on
  RewriteRule ^/twiki/pub/TWiki/(.*)$ /twiki/pub/TWiki/$1 [L,PT]
  RewriteRule ^/twiki/pub/([^\/]+)/([^\/]+)/([^\/]+)$ /twiki/bin/viewfile/$1/$2?filename=$3 [L,PT]
</verbatim>
@


1.30
log
@buildrelease
@
text
@d1 1
a1 1
%META:TOPICINFO{author="TWikiContributor" date="1131718988" format="1.1" version="30"}%
d13 1
d17 5
a21 5
	* *Peer influence* is enough to ensure that only relevant content is posted.
	* *Peer editing* - the ability for anyone to rearrange all content on a page - keeps topics focused.
	* In TWiki, content is transparently preserved under *revision control*:
		* Edits can be undone by the %MAINWEB%.TWikiAdminGroup (the default administrators group; see [[#ManagingGroups]]).
		* Users are encouraged to edit and refactor (condense a long topic), since there's a safety net.
d23 2
a24 2
	* Create broad-based Groups (for more and varied input), and...
	* Avoid creating view-only Users (if you can read it, you should be able to contribute to it).
d44 4
a47 4
	* WikiName and encrypted password are recorded using the password manager if authentication is enabled.
	* A confirmation e-mail is sent to the user.
	* A user home page with the WikiName of the user is created in the %MAINWEB% web.
	* The user is added to the %MAINWEB%.%WIKIUSERSTOPIC% topic.
d55 2
a56 2
	* ==Set <nop>GROUP = &lt; list of Users and/or Groups &gt;==
	* ==Set <nop>ALLOWTOPICCHANGE = &lt; list of Users and/or Groups &gt;==
d59 1
a59 1
	* ==Set GROUP = %MAINWEB%.<nop>SomeUser, %MAINWEB%.<nop>OtherUser, %MAINWEB%.<nop>SomeGroup==
d62 1
a62 1
	* ==Set ALLOWTOPICCHANGE = %MAINWEB%.<nop>TWikiAdminGroup==
d70 1
a70 1
	* ==Set <nop>GROUP= <nop>%MAINWEB%.ElizabethWindsor, <nop>%MAINWEB%.TonyBlair==
d76 5
a80 5
	* Restricting VIEW blocks viewing and searching of content.
	* Restricting CHANGE blocks creating new topics, changing topics or attaching files.
	* Restricting RENAME controls who is allowed to rename, move or delete a topic.
		* To rename, move or delete a topic, the user also also needs VIEW and CHANGE permission.  They also need CHANGE access to change references in any referring topics (though the rename can proceed without this access), and CHANGE access to the target topic.
	* Restricting MANAGE controls access to certain management functions, such as 'create web'. It must be set in the %TWIKIWEB% web.
d86 2
a87 2
	* *authenticating all webs and restricting selected webs:* Topic access in all webs is authenticated, and selected webs have restricted access.
	* *authenticating and restricting selected webs only:* Provide unrestricted viewing access to open webs, with authentication and restriction only on selected webs.
d89 7
a95 7
	* You can define these settings in the %WEBPREFSTOPIC% topic, preferable towards the end of the topic:
		* ==Set <nop>DENYWEBVIEW = &lt; comma-delimited list of Users and Groups &gt;==
		* ==Set <nop>ALLOWWEBVIEW = &lt; comma-delimited list of Users and Groups &gt;==
		* ==Set <nop>DENYWEBCHANGE = &lt; comma-delimited list of Users and Groups &gt;==
		* ==Set <nop>ALLOWWEBCHANGE = &lt; comma-delimited list of Users and Groups &gt;==
		* ==Set <nop>DENYWEBRENAME = &lt; comma-delimited list of Users and Groups &gt;==
		* ==Set <nop>ALLOWWEBRENAME = &lt; comma-delimited list of Users and Groups &gt;==
d98 1
a98 1
	* ==Set <nop>ALLOWWEBVIEW = <nop>==
d100 1
a100 1
	* ==Set <nop>DENYWEBVIEW = <nop>==
d105 7
a111 7
	* You can define these settings in the %WEBPREFSTOPIC% topic, preferable towards the end of the topic:
		* ==Set <nop>DENYTOPICVIEW = &lt; comma-delimited list of Users and Groups &gt;==
		* ==Set <nop>ALLOWTOPICVIEW = &lt; comma-delimited list of Users and Groups &gt;==
		* ==Set <nop>DENYTOPICCHANGE = &lt; comma-delimited list of Users and Groups &gt;==
		* ==Set <nop>ALLOWTOPICCHANGE = &lt; comma-delimited list of Users and Groups &gt;==
		* ==Set <nop>DENYTOPICRENAME = &lt; comma-delimited list of Users and Groups &gt;==
		* ==Set <nop>ALLOWTOPICRENAME = &lt; comma-delimited list of Users and Groups &gt;==
d116 1
a116 1
	* ==Set <nop>ALLOWTOPICVIEW = <nop>==
d118 1
a118 1
	* ==Set <nop>DENYTOPICVIEW = <nop>==
d129 1
a129 1
  Alias /twiki/pub/		 /filesystem/path/to/twiki/pub/
d143 17
a159 17
	1 If the user is a [[#SuperAdminGroup][super-user]]
		* access is *PERMITTED*.
	1 If DENYTOPIC is set to a list of wikinames
		* people in the list will be *DENIED*.
	1 If DENYTOPIC is set to _empty_ ( i.e. <tt>Set DENYTOPIC =</tt> )
		* access is *PERMITTED* _i.e_ no-one is denied access to this topic
	1 If ALLOWTOPIC is set
		1 people in the list are *PERMITTED*
		1 everyone else is *DENIED*
			* Note that this means that setting ALLOWTOPIC to empty _denies access to everyone except admins_ (unless DENYTOPIC is also set to empty, as described above)
	1 If DENYWEB is set to a list of wikiname
		* people in the list are *DENIED* access
	1 If ALLOWWEB is set to a list of wikinames
		* people in the list will be *PERMITTED*
		* everyone else will be *DENIED*
			* Note that setting ALLOWWEB to empty _denies access to everyone except admins_
	1 If you got this far, access is *PERMITTED*
d166 1
a166 1
	* ==Set <nop>NOSEARCHALL = on==
d170 1
a170 1
__%X% Note:__ Obfuscating a web without view access control is very insecure, as anyone who knows the URL can access the web.
d176 4
a179 6
	1. *Restrict* view access to selected Users and Groups. Set one or both of these variables in its %WEBPREFSTOPIC% topic:
		* ==Set <nop>DENYWEBVIEW = &lt; list of Users and Groups &gt;==
		* ==Set <nop>ALLOWWEBVIEW = &lt; list of Users and Groups &gt;==
		* __Note:__ =DENYWEBVIEW= is evaluated before =ALLOWWEBVIEW=. Access is denied if the authenticated person is in the =DENYWEBVIEW= list, or not in the =ALLOWWEBVIEW= list. Access is granted in case =DENYWEBVIEW= and =ALLOWWEBVIEW= is not defined.
	1. *Hide* the web from an "all webs" search. Enable this restriction with the ==NOSEARCHALL== variable in its %WEBPREFSTOPIC% topic:
		* ==Set <nop>NOSEARCHALL = on==
d185 4
a188 6
	1. *Restrict* view access to selected Users and Groups. Set one or both of these variables in its %WEBPREFSTOPIC% topic:
		* ==Set <nop>DENYWEBVIEW = &lt; list of Users and Groups &gt;==
		* ==Set <nop>ALLOWWEBVIEW = &lt; list of Users and Groups &gt;==
		* __Note:__ =DENYWEBVIEW= is evaluated before =ALLOWWEBVIEW=. Access is denied if the authenticated person is in the =DENYWEBVIEW= list, or not in the =ALLOWWEBVIEW= list. Access is granted in case =DENYWEBVIEW= and =ALLOWWEBVIEW= is not defined.
	1. *Hide* the web from an "all webs" search. Enable this restriction with the ==NOSEARCHALL== variable in its %WEBPREFSTOPIC% topic:
		* ==Set <nop>NOSEARCHALL = on==
@


1.29
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="PeterThoeny" date="1092559631" format="1.0" version="1.29"}%
d9 3
a11 1
TWikiAccessControl allows you restrict access to single topics and entire webs, by individual user and by user Groups, in three areas: view; edit &amp; attach; and rename/move/delete. Access control, combined with TWikiUserAuthentication, lets you easily create and manage an extremely flexible, fine-grained privilege system.
d15 1
a15 2
Open, freeform editing is the essence of WikiCulture - what makes TWiki different and often more effective than other collaboration tools. For that reason, it is strongly recommended that decisions to restrict read or write access to a web or a topic are made with care - the more restrictions, the less Wiki in the mix. Experience shows that _unrestricted write access_ works very well because:

d17 1
a17 3

	* *Peer editing* - the ability for anyone to rearrange all content on a page - keeps topics focussed.

a20 1

a21 1

d25 5
d43 1
a43 2

	* WikiName and encrypted password are recorded in =.htpasswd= if authentication is enabled.
a47 2
Users can be authenticated using Basic Authentication (htaccess) or SSL (secure server). In either case, TWikiUserAuthentication is required in order to track user identities, and use User and Group access control.

d53 3
a55 10
Groups are defined by group topics created in the ==%MAINWEB%== web, like the %MAINWEB%.TWikiAdminGroup. To create a new group:
	1. ==Edit== %MAINWEB%.TWikiGroups by entering a new topic with a name that ends in ==Group==. Example:
		* ==<nop>SomeGroup==
	1. *Set Preferences* for two Variables in the new group topic:
		* ==Set <nop>GROUP = &lt; list of Users and/or Groups &gt;==
		* ==Set <nop>ALLOWTOPICCHANGE = &lt; list of Users and/or Groups &gt;==
		* The GROUP variable is a comma-separated list of Users and/or other Groups. Example:
			* ==Set GROUP = %MAINWEB%.<nop>SomeUser, %MAINWEB%.<nop>OtherUser, %MAINWEB%.<nop>SomeGroup==
		* ALLOWTOPICCHANGE defines who is allowed to change the group topic; it is a comma delimited list of Users and Groups. You typically want to restrict that to the members of the group itself, so it should contain the name of the topic. (This prevents Users not in the Group from editing the topic to give themselves or others access. For example, for the <nop>TWikiAdminGroup topic write:
		* ==Set ALLOWTOPICCHANGE = %MAINWEB%.<nop>TWikiAdminGroup==
d57 2
a58 1
---++ Restricting Write Access
d60 2
a61 1
You can define who is allowed to make changes to a web or a topic. 
d63 1
a63 1
---+++ Deny Editing by Topic
d65 2
a66 4
Denying editing of a topic also restricts file attachment; both privileges are assigned together.
	* Define one or both of these variables in a topic, preferably at the end of the page:
		* ==Set <nop>DENYTOPICCHANGE = &lt; list of Users and Groups &gt;==
		* ==Set <nop>ALLOWTOPICCHANGE = &lt; list of Users and Groups &gt;==
d68 2
a69 2
	* DENYTOPICCHANGE defines Users or Groups that *are not* allowed to make changes to the topic, with a comma-delimited list. Example:
		* ==Set <nop>DENYTOPICCHANGE = %MAINWEB%.<nop>SomeBadBoy, %MAINWEB%.<nop>SomeBadGirl, %MAINWEB%.<nop>SomeHackerGroup==
d71 1
a71 2
	* ALLOWTOPICCHANGE defines Users or Groups that *are* allowed to make changes to the topic. It is a comma delimited list of Users and Groups. Example:
		* ==Set <nop>ALLOWTOPICCHANGE = %MAINWEB%.<nop>SomeGoodGuy, %MAINWEB%.<nop>SomeGoodGirl, %MAINWEB%.<nop>TWikiAdminGroup==
d73 1
a73 1
	* DENYTOPICCHANGE is evaluated before ALLOWTOPICCHANGE. Access is denied if the authenticated person is in the DENYTOPICCHANGE list, or not in the ALLOWTOPICCHANGE list. Access is granted in case DENYTOPICCHANGE and ALLOWTOPICCHANGE is not defined.
d75 5
a79 1
---+++ Deny Editing by Web
d81 1
a81 1
Restricting web-level editing blocks creating new topics, changing topics or attaching files.
d83 1
a83 3
	* Define one or both of these variable in the %WEBPREFSTOPIC% topic:
		* ==Set <nop>DENYWEBCHANGE = &lt; list of Users and Groups &gt;==
		* ==Set <nop>ALLOWWEBCHANGE = &lt; list of Users and Groups &gt;==
d85 2
a86 3
The same rules apply as for restricting topics, with these additions:
	* DENYTOPICCHANGE (in topic) overrides DENYWEBCHANGE (in <nop>%WEBPREFSTOPIC%)
	* ALLOWTOPICCHANGE (in topic) overrides ALLOWWEBCHANGE (in <nop>%WEBPREFSTOPIC%)
d88 31
a118 1
---++ Restricting Rename Access
d120 1
a120 1
You can define who is allowed to rename, move or delete a topic, or rename a web.
d122 1
a122 1
---+++ Deny Renaming by Topic
d124 1
a124 1
To allow a user to rename, move or delete a topic, they also need write (editing) permission.  They also need write access to change references in referring topics.
d126 3
a128 3
	* Define one or both of these variables in a topic, preferably at the end of the topic:
		* ==Set <nop>DENYTOPICRENAME = &lt; list of Users and Groups &gt;==
		* ==Set <nop>ALLOWTOPICRENAME = &lt; list of Users and Groups &gt;==
d130 4
a133 9
	* DENYTOPICCRENAME defines Users or Groups that *are not* allowed to rename the topic. It is a comma delimited list of Users and Groups. Example:
		* ==Set <nop>DENYTOPICRENAME = %MAINWEB%.<nop>SomeBadBoy, %MAINWEB%.<nop>SomeBadGirl, %MAINWEB%.<nop>SomeHackerGroup==

	* ALLOWTOPICRENAME defines Users or Groups that *are* allowed to rename the topic. It is a comma delimited list of Users and Groups. Example:
		* ==Set <nop>ALLOWTOPICRENAME = %MAINWEB%.<nop>SomeGoodGuy, %MAINWEB%.<nop>SomeGoodGirl, %MAINWEB%.<nop>TWikiAdminGroup==

	* DENYTOPICRENAME is evaluated before ALLOWTOPICRENAME. Access is denied if the authenticated person is in the DENYTOPICRENAME list, or not in the ALLOWTOPICRENAME list. Access is granted in case DENYTOPICRENAME and ALLOWTOPICRENAME is not defined.

---+++ Deny Renaming by Web
d135 1
a135 1
You can define restrictions of who is allowed to rename a %WIKITOOLNAME% web.
d137 1
a137 3
	* Define one or both of these variable in the %WEBPREFSTOPIC% topic:
		* ==Set <nop>DENYWEBRENAME = &lt; list of Users and Groups &gt;==
		* ==Set <nop>ALLOWWEBRENAME = &lt; list of Users and Groups &gt;==
d139 1
a139 3
The same rules apply as for topics, with these additions:
	* DENYTOPICRENAME (in topic) overrides DENYWEBRENAME (in <nop>%WEBPREFSTOPIC%)
	* ALLOWTOPICRENAME (in topic) overrides ALLOWWEBRENAME (in <nop>%WEBPREFSTOPIC%)
d141 18
a158 1
---++ Restricting Read Access
d160 1
a160 1
You can define who is allowed to see a web.
d162 1
a162 1
---+++ Deny Viewing by Topic
d164 1
a164 13
%X% Technically it is possible to restrict read access to an individual topic based on ==DENYTOPICVIEW== / ==ALLOWTOPICVIEW== preferences variables, provided that the view script is authenticated. However this setup is not recommended since all content is searchable within a web - a search will turn up view restricted topics.

---+++ Deny Viewing by Web

You can define restrictions of who is allowed to view a %WIKITOOLNAME% web. You can restrict access to certain webs to selected Users and Groups, by:

	* *obfuscating webs:* Insecure but handy method to hide new webs until content is ready for deployment.
	* *authenticating all webs and restricting selected webs:* Topic access in all webs is authenticated, and selected webs have restricted access.
	* *authenticating and restricting selected webs only:* Provide unrestricted viewing access to open webs, with authentication and restriction only on selected webs.

---++++ Obfuscate Webs

The idea is to keep a web hidden by not publishing its URL and by preventing the ==all webs== search option from accessing obfuscated webs. Do so by enabling the ==NOSEARCHALL== variable in %WEBPREFSTOPIC%:
d167 1
a167 1
This setup can be useful to hide a new web until content its ready for deployment.
d169 1
a169 1
%X% *Obfuscating webs is insecure*, as anyone who knows the URL can access the web.
d171 1
a171 1
---++++ Authenticate all Webs and Restrict Selected Webs
d173 1
a173 1
Use the following setup to authenticate users for topic viewing in all webs and to restrict access to selected webs:
a180 1
	1. *Add* ==view== to the list of authenticated scripts in the =.htaccess= file.
d182 1
a182 1
%H% This method only works if the ==view== script is authenticated, which means that all Users have to login, even for read-only access. (An open guest account, like Main.TWikiGuest, can get around this, allowing anyone to login to a common account with, for example, view-only access for public webs.) TWikiInstallationGuide has more on Basic Authentication, using the ==.htaccess== file.
d184 1
a184 3
---++++ Authenticate and Restricting Selected Webs Only

Use the following setup to provide unrestricted viewing access to open webs, with authentication only on selected webs:
a191 5
	1. *Enable* the ==$doRememberRemoteUser== flag in ==lib/TWiki.cfg== as described in TWikiUserAuthentication. %WIKITOOLNAME% will now remember the IP address of an authenticated user. 
	1. *Copy* the ==view== script to ==viewauth== (or better, create a symbolic link) 
	1. *Add* ==viewauth== to the list of authenticated scripts in the =.htaccess= file. The ==view== script should not be listed in the =.htaccess= file.

When a user accesses a web where you enabled view restriction, %WIKITOOLNAME% will redirect from the =view= script to the =viewauth= script once (this happens only if the user has never edited a topic). Doing so will ask for authentication. The =viewauth= script shows the requested topic if the user could log on and if the user is authorized to see that web.
d193 1
a193 1
%X% *Authenticating webs is not very secure*, as there is a way to circumvent the read access restriction. It can be useful in certain situations - for example, to simplify site organization and clutter, by hiding low traffic webs - but is not recommended for securing sensitive content.
d195 1
d197 4
a200 19
---++ Hiding Control Settings

%T% To hide access control settings from normal browser viewing, place them in comment markers.

<style="background-color:#f5f5f5">
=&lt;!--= <br />
=&nbsp;  * Set <nop>DENYTOPICCHANGE = Main.<nop>SomeGroup= <br />
=--&gt;=
</style>

#SuperAdminGroup
---++ The <nop>SuperAdminGroup

By mistyping a user or group name in the ALLOWTOPICCHANGE setting, it's possible to lock a topic so that no-one can edit it from a browser. To avoid this, you can create Web-based *superusers*:
	* Set the ==$superAdminGroup== variable in ==lib/TWiki.cfg== to the name of a group of Users who are always allowed to edit/view topics.
<blockquote style="background-color:#f5f5f5">
<verbatim>
$superAdminGroup = "TWikiAdminGroup";
</verbatim>
a201 1
	* The default setting is not to have superusers.
d203 1
a203 2
-- TWiki:Main.PeterThoeny - 04 May 2002 %BR%
-- TWiki:Main.MikeMannix - 12 May 2002 
d205 1
a205 1
%STOPINCLUDE%
d207 1
@


1.28
log
@none
@
text
@d1 212
a212 211
%META:TOPICINFO{author="PeterThoeny" date="1050304762" format="1.0" version="1.28"}%
%TOC%
%STARTINCLUDE%

---# TWiki Access Control

_Restricting read and write access to topics and webs, by Users and groups_

TWikiAccessControl allows you restrict access to single topics and entire webs, by individual user and by user Groups, in three areas: view; edit &amp; attach; and rename/move/delete. Access control, combined with TWikiUserAuthentication, lets you easily create and manage an extremely flexible, fine-grained privilege system.

---++ An Important Control Consideration

Open, freeform editing is the essence of WikiCulture - what makes TWiki different and often more effective than other collaboration tools. For that reason, it is strongly recommended that decisions to restrict read or write access to a web or a topic are made with care - the more restrictions, the less Wiki in the mix. Experience shows that _unrestricted write access_ works very well because:

	* *Peer influence* is enough to ensure that only relevant content is posted.

	* *Peer editing* - the ability for anyone to rearrange all content on a page - keeps topics focussed.

	* In TWiki, content is transparently preserved under *revision control*:
		* Edits can be undone by the %MAINWEB%.TWikiAdminGroup (the default administrators group; see [[#ManagingGroups]]).
		* Users are encouraged to edit and refactor (condense a long topic), since there's a safety net.

As a *collaboration guideline*:

	* Create broad-based Groups (for more and varied input), and...
	* Avoid creating view-only Users (if you can read it, you should be able to contribute to it).

---++ Authentication vs. Access Control

*Authentication:* Identifies who a user is based on a login procedure. See TWikiUserAuthentication.

*Access control:* Restrict access to content based on users and groups once a user is identified.

---++ Users and Groups

Access control is based on the familiar concept of Users and Groups. Users are defined by their WikiNames. They can then be organized in unlimited combinations by inclusion in one or more user Groups. For convenience, Groups can also be included in other Groups. 

---+++ Managing Users

A user can create an account in TWikiRegistration. The following actions are performed:

	* WikiName and encrypted password are recorded in =.htpasswd= if authentication is enabled.
	* A confirmation e-mail is sent to the user.
	* A user home page with the WikiName of the user is created in the %MAINWEB% web.
	* The user is added to the %MAINWEB%.%WIKIUSERSTOPIC% topic.

Users can be authenticated using Basic Authentication (htaccess) or SSL (secure server). In either case, TWikiUserAuthentication is required in order to track user identities, and use User and Group access control.

The default visitor name is %MAINWEB%.TWikiGuest. This is the non-authenticated user.

#ManagingGroups
---+++ Managing Groups

Groups are defined by group topics created in the ==%MAINWEB%== web, like the %MAINWEB%.TWikiAdminGroup. To create a new group:
	1. ==Edit== %MAINWEB%.TWikiGroups by entering a new topic with a name that ends in ==Group==. Example:
		* ==<nop>SomeGroup==
	1. *Set Preferences* for two Variables in the new group topic:
		* ==Set <nop>GROUP = &lt; list of Users and/or Groups &gt;==
		* ==Set <nop>ALLOWTOPICCHANGE = &lt; list of Users and/or Groups &gt;==
		* The GROUP variable is a comma-separated list of Users and/or other Groups. Example:
			* ==Set GROUP = %MAINWEB%.<nop>SomeUser, %MAINWEB%.<nop>OtherUser, %MAINWEB%.<nop>SomeGroup==
		* ALLOWTOPICCHANGE defines who is allowed to change the group topic; it is a comma delimited list of Users and Groups. You typically want to restrict that to the members of the group itself, so it should contain the name of the topic. (This prevents Users not in the Group from editing the topic to give themselves or others access. For example, for the <nop>TWikiAdminGroup topic write:
		* ==Set ALLOWTOPICCHANGE = %MAINWEB%.<nop>TWikiAdminGroup==

---++ Restricting Write Access

You can define who is allowed to make changes to a web or a topic. 

---+++ Deny Editing by Topic

Denying editing of a topic also restricts file attachment; both privileges are assigned together.
	* Define one or both of these variables in a topic, preferably at the end of the page:
		* ==Set <nop>DENYTOPICCHANGE = &lt; list of Users and Groups &gt;==
		* ==Set <nop>ALLOWTOPICCHANGE = &lt; list of Users and Groups &gt;==

	* DENYTOPICCHANGE defines Users or Groups that *are not* allowed to make changes to the topic, with a comma-delimited list. Example:
		* ==Set <nop>DENYTOPICCHANGE = %MAINWEB%.<nop>SomeBadBoy, %MAINWEB%.<nop>SomeBadGirl, %MAINWEB%.<nop>SomeHackerGroup==

	* ALLOWTOPICCHANGE defines Users or Groups that *are* allowed to make changes to the topic. It is a comma delimited list of Users and Groups. Example:
		* ==Set <nop>ALLOWTOPICCHANGE = %MAINWEB%.<nop>SomeGoodGuy, %MAINWEB%.<nop>SomeGoodGirl, %MAINWEB%.<nop>TWikiAdminGroup==

	* DENYTOPICCHANGE is evaluated before ALLOWTOPICCHANGE. Access is denied if the authenticated person is in the DENYTOPICCHANGE list, or not in the ALLOWTOPICCHANGE list. Access is granted in case DENYTOPICCHANGE and ALLOWTOPICCHANGE is not defined.

---+++ Deny Editing by Web

Restricting web-level editing blocks creating new topics, changing topics or attaching files.

	* Define one or both of these variable in the %WEBPREFSTOPIC% topic:
		* ==Set <nop>DENYWEBCHANGE = &lt; list of Users and Groups &gt;==
		* ==Set <nop>ALLOWWEBCHANGE = &lt; list of Users and Groups &gt;==

The same rules apply as for restricting topics, with these additions:
	* DENYTOPICCHANGE (in topic) overrides DENYWEBCHANGE (in <nop>%WEBPREFSTOPIC%)
	* ALLOWTOPICCHANGE (in topic) overrides ALLOWWEBCHANGE (in <nop>%WEBPREFSTOPIC%)

---++ Restricting Rename Access

You can define who is allowed to rename, move or delete a topic, or rename a web.

---+++ Deny Renaming by Topic

To allow a user to rename, move or delete a topic, they also need write (editing) permission.  They also need write access to change references in referring topics.

	* Define one or both of these variables in a topic, preferably at the end of the topic:
		* ==Set <nop>DENYTOPICRENAME = &lt; list of Users and Groups &gt;==
		* ==Set <nop>ALLOWTOPICRENAME = &lt; list of Users and Groups &gt;==

	* DENYTOPICCRENAME defines Users or Groups that *are not* allowed to rename the topic. It is a comma delimited list of Users and Groups. Example:
		* ==Set <nop>DENYTOPICRENAME = %MAINWEB%.<nop>SomeBadBoy, %MAINWEB%.<nop>SomeBadGirl, %MAINWEB%.<nop>SomeHackerGroup==

	* ALLOWTOPICRENAME defines Users or Groups that *are* allowed to rename the topic. It is a comma delimited list of Users and Groups. Example:
		* ==Set <nop>ALLOWTOPICRENAME = %MAINWEB%.<nop>SomeGoodGuy, %MAINWEB%.<nop>SomeGoodGirl, %MAINWEB%.<nop>TWikiAdminGroup==

	* DENYTOPICRENAME is evaluated before ALLOWTOPICRENAME. Access is denied if the authenticated person is in the DENYTOPICRENAME list, or not in the ALLOWTOPICRENAME list. Access is granted in case DENYTOPICRENAME and ALLOWTOPICRENAME is not defined.

---+++ Deny Renaming by Web

You can define restrictions of who is allowed to rename a %WIKITOOLNAME% web.

	* Define one or both of these variable in the %WEBPREFSTOPIC% topic:
		* ==Set <nop>DENYWEBRENAME = &lt; list of Users and Groups &gt;==
		* ==Set <nop>ALLOWWEBRENAME = &lt; list of Users and Groups &gt;==

The same rules apply as for topics, with these additions:
	* DENYTOPICRENAME (in topic) overrides DENYWEBRENAME (in <nop>%WEBPREFSTOPIC%)
	* ALLOWTOPICRENAME (in topic) overrides ALLOWWEBRENAME (in <nop>%WEBPREFSTOPIC%)

---++ Restricting Read Access

You can define who is allowed to see a web.

---+++ Deny Viewing by Topic

%X% Technically it is possible to restrict read access to an individual topic based on ==DENYTOPICVIEW== / ==ALLOWTOPICVIEW== preferences variables, provided that the view script is authenticated. However this setup is not recommended since all content is searchable within a web - a search will turn up view restricted topics.

---+++ Deny Viewing by Web

You can define restrictions of who is allowed to view a %WIKITOOLNAME% web. You can restrict access to certain webs to selected Users and Groups, by:

	* *obfuscating webs:* Insecure but handy method to hide new webs until content is ready for deployment.
	* *authenticating all webs and restricting selected webs:* Topic access in all webs is authenticated, and selected webs have restricted access.
	* *authenticating and restricting selected webs only:* Provide unrestricted viewing access to open webs, with authentication and restriction only on selected webs.

---++++ Obfuscate Webs

The idea is to keep a web hidden by not publishing its URL and by preventing the ==all webs== search option from accessing obfuscated webs. Do so by enabling the ==NOSEARCHALL== variable in %WEBPREFSTOPIC%:
	* ==Set <nop>NOSEARCHALL = on==

This setup can be useful to hide a new web until content its ready for deployment.

%X% *Obfuscating webs is insecure*, as anyone who knows the URL can access the web.

---++++ Authenticate all Webs and Restrict Selected Webs

Use the following setup to authenticate users for topic viewing in all webs and to restrict access to selected webs:

	1. *Restrict* view access to selected Users and Groups. Set one or both of these variables in its %WEBPREFSTOPIC% topic:
		* ==Set <nop>DENYWEBVIEW = &lt; list of Users and Groups &gt;==
		* ==Set <nop>ALLOWWEBVIEW = &lt; list of Users and Groups &gt;==
		* __Note:__ =DENYWEBVIEW= is evaluated before =ALLOWWEBVIEW=. Access is denied if the authenticated person is in the =DENYWEBVIEW= list, or not in the =ALLOWWEBVIEW= list. Access is granted in case =DENYWEBVIEW= and =ALLOWWEBVIEW= is not defined.
	1. *Hide* the web from an "all webs" search. Enable this restriction with the ==NOSEARCHALL== variable in its %WEBPREFSTOPIC% topic:
		* ==Set <nop>NOSEARCHALL = on==
	1. *Add* ==view== to the list of authenticated scripts in the =.htaccess= file.

%H% This method only works if the ==view== script is authenticated, which means that all Users have to login, even for read-only access. (An open guest account, like Main.TWikiGuest, can get around this, allowing anyone to login to a common account with, for example, view-only access for public webs.) TWikiInstallationGuide has more on Basic Authentication, using the ==.htaccess== file.

---++++ Authenticate and Restricting Selected Webs Only

Use the following setup to provide unrestricted viewing access to open webs, with authentication only on selected webs:

	1. *Restrict* view access to selected Users and Groups. Set one or both of these variables in its %WEBPREFSTOPIC% topic:
		* ==Set <nop>DENYWEBVIEW = &lt; list of Users and Groups &gt;==
		* ==Set <nop>ALLOWWEBVIEW = &lt; list of Users and Groups &gt;==
		* __Note:__ =DENYWEBVIEW= is evaluated before =ALLOWWEBVIEW=. Access is denied if the authenticated person is in the =DENYWEBVIEW= list, or not in the =ALLOWWEBVIEW= list. Access is granted in case =DENYWEBVIEW= and =ALLOWWEBVIEW= is not defined.
	1. *Hide* the web from an "all webs" search. Enable this restriction with the ==NOSEARCHALL== variable in its %WEBPREFSTOPIC% topic:
		* ==Set <nop>NOSEARCHALL = on==
	1. *Enable* the ==$doRememberRemoteUser== flag in ==lib/TWiki.cfg== as described in TWikiUserAuthentication. %WIKITOOLNAME% will now remember the IP address of an authenticated user. 
	1. *Copy* the ==view== script to ==viewauth== (or better, create a symbolic link) 
	1. *Add* ==viewauth== to the list of authenticated scripts in the =.htaccess= file. The ==view== script should not be listed in the =.htaccess= file.

When a user accesses a web where you enabled view restriction, %WIKITOOLNAME% will redirect from the =view= script to the =viewauth= script once (this happens only if the user has never edited a topic). Doing so will ask for authentication. The =viewauth= script shows the requested topic if the user could log on and if the user is authorized to see that web.

%X% *Authenticating webs is not very secure*, as there is a way to circumvent the read access restriction. It can be useful in certain situations - for example, to simplify site organization and clutter, by hiding low traffic webs - but is not recommended for securing sensitive content.


---++ Hiding Control Settings

%T% To hide access control settings from normal browser viewing, place them in comment markers.

<style="background-color:#f5f5f5">
=&lt;!--= <br />
=&nbsp;  * Set <nop>DENYTOPICCHANGE = Main.<nop>SomeGroup= <br />
=--&gt;=
</style>

#SuperAdminGroup
---++ The <nop>SuperAdminGroup

By mistyping a user or group name in the ALLOWTOPICCHANGE setting, it's possible to lock a topic so that no-one can edit it from a browser. To avoid this, you can create Web-based *superusers*:
	* Set the ==$superAdminGroup== variable in ==lib/TWiki.cfg== to the name of a group of Users who are always allowed to edit/view topics.
<blockquote style="background-color:#f5f5f5">
<verbatim>
$superAdminGroup = "TWikiAdminGroup";
</verbatim>
</blockquote>
	* The default setting is not to have superusers.

-- Main.PeterThoeny - 04 May 2002<br />
-- Main.MikeMannix - 12 May 2002 

%STOPINCLUDE%
@


1.27
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="PeterThoeny" date="1041128291" format="1.0" version="1.27"}%
d27 6
@


1.26
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="PeterThoeny" date="1022686560" format="1.0" version="1.26"}%
d34 1
a34 1
A user is created with the TWikiRegistration form. The process generates a topic in the %MAINWEB% web in the new user's WikiName. The default visitor name is %MAINWEB%.TWikiGuest.
d36 8
a43 1
	* Users can be authenticated using Basic Authentication (htaccess) or SSL (secure server). In either case, TWikiUserAuthentication is required in order to track user identities, and use User and Group access control.
@


1.25
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="PeterThoeny" date="1022658495" format="1.0" version="1.25"}%
d147 1
d161 1
d175 7
a181 6
	* %T% To hide access control settings from normal browser viewing, place them in comment markers. 
<blockquote style="background-color:#f5f5f5">
	&lt;!--<br />
	* Set <nop>DENYTOPICCHANGE = Main.<nop>SomeGroup<br />
	--&gt;
</blockquote>
@


1.24
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="MikeMannix" date="1021203240" format="1.0" version="1.24"}%
d115 1
a115 1
---++ Restricting Web Access
d117 1
a117 1
You can prevent selected Users and Groups from accessing certain webs, by hiding them using restricting read access, or by requiring login. There are two basic methods, one simple, using standard preferences variables to hide a web, but offering low security, and a secure log-in approach that is currently a workaround, involving some minor script and filesystem modification.
d119 1
a119 1
---+++ Create Hidden Webs
d121 1
a121 3
You can prevent selected Users and Groups from viewing certain %WIKITOOLNAME% webs by setting one or both of these variables in each web's %WEBPREFSTOPIC% topic:
	* ==Set <nop>DENYWEBVIEW = &lt; list of Users and Groups &gt;==
	* ==Set <nop>ALLOWWEBVIEW = &lt; list of Users and Groups &gt;==
d123 11
a133 1
%T% If keeping a hidden web out of general use is a consideration, you can prevent the ==all webs== search option from accessing hidden webs, by enabling the ==NOSEARCHALL== variable in WebPreferences:
a134 2
		* It is not recommended to restrict view access to individual topics since all content is searchable _within_ a web.
		* %H%This method only works if the ==view== script is authenticated, which means that all Users have to login, even for read-only access. (An open guest account, like Main.TWikiGuest, can get around this, allowing anyone to login to a common account with, for example, view-only access for public webs.) TWikiInstallationGuide has more on Basic Authentication, using the ==.htaccess== file.
d136 1
a136 1
%X% *Hiding webs is not very secure*, as there is a way to circumvent the read access restriction. It can be useful in certain situations - for example, to simplify site organization and clutter, by hiding low traffic webs - but is not recommended for securing sensitive content. _(See the next section for a more secure approach.)_
d138 16
a153 1
---+++ Create Authenticated Access By Web
d156 6
a161 1
	1. *Omit* the ==view== script from the =.htaccess= file.
d164 5
a168 1
	1. *Add* ==viewauth== to the list of authenticated scripts in the .htaccess file.
a169 4
	* When a user accesses a web where you enabled view restriction, %WIKITOOLNAME% will redirect from the =view= script to the =viewauth= script once (this happens only if the user has never edited a topic). Doing so will ask for authentication. The =viewauth= script shows the requested topic if the user could log on and if the user is authorized to see that web.
	* If you enable view restriction for a web, it is recommended to restrict search "all webs" from searching this web. Enable this restriction with the ==NOSEARCHALL== variable in its WebPreferences, like:
		* ==Set <nop>NOSEARCHALL = on==
	* It is not recommended to restrict view access to individual topics since all content is searchable within a web - a search will turn up the "hidden" topic.
@


1.23
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="PeterThoeny" date="1020495474" format="1.0" version="1.23"}%
d7 1
a7 1
_Restricting read and write access to topics and webs, by users and groups_
d9 1
a9 1
TWikiAccessControl allows you restrict access to single topics and entire webs, by individual user and by user groups, in three main areas: view; edit &amp; attach; and rename/move/delete. These controls, combined with TWikiUserAuthentication, let you easily create and manage an extremely flexible, fine-grained privilege system.
d13 1
a13 1
Open, freeform editing is the essence of the WikiCulture - it's what makes TWiki different and often more effective than other collaboration tools. So, it is strongly recommended that decisions to restrict read or write access to a web or a topic are made with care. Experience shows that _unrestricted write access_ works very well because:
d15 1
a15 1
	* Peer influence is enough to ensure that only relevant content is posted.
d17 1
a17 1
	* Peer editing - the ability to rearrange anything on a page - keeps topics focussed.
d19 1
a19 1
	* All content is preserved under revision control.
d23 1
a23 1
As a collaboration guideline:
d25 2
a26 2
	* Create broad groups (more and varied input), and...
	* Avoid creating view-only users (if you can read it, you can contribute to it).
d30 1
a30 1
Access control is based on users and groups. Users are defined by their WikiNames, an then organized in unlimited combinations under different user groups.  
d34 1
a34 1
A user is created by with the TWikiRegistration form. The process generates a topic in the %MAINWEB% web in the new user's WikiName. The default visitor name is %MAINWEB%.TWikiGuest.
d36 1
a36 1
	* Users can be authenticated using Basic Authentication or SSL. TWikiUserAuthentication is required in order to track user identities.
d41 2
a42 2
Groups are defined by group topics in the ==%MAINWEB%== web, like the %MAINWEB%.TWikiAdminGroup. To create a new group:
	1. Start in %MAINWEB%.TWikiGroups and *create* a new topic with a name that ends in *Group*. Example:
d44 6
a49 8
	1. *Define* two variables in the group topic:
		* ==Set <nop>GROUP = &lt; list of users and/or groups &gt;==
		* ==Set <nop>ALLOWTOPICCHANGE = &lt; list of users and/or groups &gt;==

	* A variables is defined as a bullet of format =Set NAME = value=. A bullet line starts with a multiple of three spaces, an asterisk, and a space.
	* The GROUP variable is a comma-separated list of users and/or other groups. Example:
		* ==Set GROUP = %MAINWEB%.<nop>SomeUser, %MAINWEB%.<nop>OtherUser, %MAINWEB%.<nop>SomeOtherGroup==
	* ALLOWTOPICCHANGE defines who is allowed to change the group topic; it is a comma delimited list of users and groups. You typically want to restrict that to the members of the group itself, so it should contain the name of the topic. (This prevents users not in the group from editing the topic and from gaining unauthorized membership to the group.) For example, for the <nop>TWikiAdminGroup topic write:
d60 2
a61 2
		* ==Set <nop>DENYTOPICCHANGE = &lt; list of users and groups &gt;==
		* ==Set <nop>ALLOWTOPICCHANGE = &lt; list of users and groups &gt;==
d63 1
a63 1
	* DENYTOPICCHANGE defines users or groups that *are not* allowed to make changes to the topic. It is a comma delimited list of users and groups. Example:
d66 1
a66 1
	* ALLOWTOPICCHANGE defines users or groups that *are* allowed to make changes to the topic. It is a comma delimited list of users and groups. Example:
d76 2
a77 2
		* ==Set <nop>DENYWEBCHANGE = &lt; list of users and groups &gt;==
		* ==Set <nop>ALLOWWEBCHANGE = &lt; list of users and groups &gt;==
d92 2
a93 2
		* ==Set <nop>DENYTOPICRENAME = &lt; list of users and groups &gt;==
		* ==Set <nop>ALLOWTOPICRENAME = &lt; list of users and groups &gt;==
d95 1
a95 1
	* DENYTOPICCRENAME defines users or groups that *are not* allowed to rename the topic. It is a comma delimited list of users and groups. Example:
d98 1
a98 1
	* ALLOWTOPICRENAME defines users or groups that *are* allowed to rename the topic. It is a comma delimited list of users and groups. Example:
d108 2
a109 2
		* ==Set <nop>DENYWEBRENAME = &lt; list of users and groups &gt;==
		* ==Set <nop>ALLOWWEBRENAME = &lt; list of users and groups &gt;==
d117 1
a117 1
You can prevent selected users and groups from accessing certain webs, by hiding them using restricting read access, or by requiring login. There are two basic methods, one simple, using standard preferences variables to hide a web, but offering low security, and a secure log-in approach that is currently a workaround, involving some minor script and filesystem modification.
d121 3
a123 3
You can prevent selected users and groups from viewing certain %WIKITOOLNAME% webs by setting one or both of these variables in each web's %WEBPREFSTOPIC% topic:
	* ==Set <nop>DENYWEBVIEW = &lt; list of users and groups &gt;==
	* ==Set <nop>ALLOWWEBVIEW = &lt; list of users and groups &gt;==
d128 1
a128 1
		* %H%This method only works if the ==view== script is authenticated, which means that all users have to login, even for read-only access. (An open guest account, like Main.TWikiGuest, can get around this, allowing anyone to login to a common account with, for example, view-only access for public webs.) TWikiInstallationGuide has more on Basic Authentication, using the ==.htaccess== file.
d143 1
a143 1
	* It is not recommended to restrict view access to individual topics since all content is searchable _within_ a web.
d150 1
a150 1
	Set <nop>DENYTOPICCHANGE = Main.<nop>SomeGroup<br />
d158 1
a158 1
	* Set the =$superAdminGroup= variable in =lib/TWiki.cfg= to the name of a group of users who are always allowed to edit/view topics.
d166 4
a169 2
-- Main.MikeMannix - 01 Apr 2002 <br />
-- Main.PeterThoeny - 04 May 2002
@


1.22
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="MikeMannix" date="1017705859" format="1.0" version="1.22"}%
d20 1
a20 1
		* Edits can be undone by the %MAINWEB%.TWikiAdminGroup (the default administrators group; see #ManagingGroups).
d41 12
a52 12
Groups are defined by group topics in the ==%MAINWEB%== web, like the %MAINWEB%.TWikiAdminGroup. To start a new group:
	1. *Create* a new topic with A name that ends in *Group*, =<nop>SomeGroup=
	1. *Define* two variables:
		* Set <nop>GROUP = &lt; list of users and groups &gt;
		* Set <nop>ALLOWTOPICCHANGE = &lt; list of users and groups &gt;

	* GROUP is a comma-separated list of users and of other groups:<br />
	  ==&nbsp; &nbsp; Set <nop>GROUP = %MAINWEB%.<nop>SomeUser, %MAINWEB%.<nop>OtherUser, %MAINWEB%.<nop>SomeOtherGroup==

	* ALLOWTOPICCHANGE defines who is allowed to change the group topic; it is a comma delimited list of users and groups. You typically want to restrict that to the members of the group itself, so it should contain the name of the topic,<br /> 
	  ==&nbsp; &nbsp; Set <nop>ALLOWTOPICCHANGE = %MAINWEB%.<nop>TWikiAdminGroup== <br /> 
	  for the <nop>TWikiAdminGroup topic. (This prevents users not in the group from editing the topic and from gaining unauthorized membership to the group.)
d62 2
a63 2
		* Set <nop>DENYTOPICCHANGE = &lt; list of users and groups &gt;
		* Set <nop>ALLOWTOPICCHANGE = &lt; list of users and groups &gt;
d65 2
a66 1
	* DENYTOPICCHANGE defines users or groups that *are not* allowed to make changes to the topic. It is a comma delimited list of users and groups. Example: <br> =&nbsp; &nbsp; * Set <nop>DENYTOPICCHANGE = %MAINWEB%.<nop>SomeBadBoy, %MAINWEB%.<nop>SomeBadGirl, %MAINWEB%.<nop>SomeHackerGroup=
d68 2
a69 1
	* ALLOWTOPICCHANGE defines users or groups that *are* allowed to make changes to the topic. It is a comma delimited list of users and groups. Example: <br> =&nbsp; &nbsp; * Set <nop>ALLOWTOPICCHANGE = %MAINWEB%.<nop>SomeGoodGuy, %MAINWEB%.<nop>SomeGoodGirl, %MAINWEB%.<nop>TWikiAdminGroup=
d78 2
a79 2
		* Set <nop>DENYWEBCHANGE = &lt; list of users and groups &gt;
		* Set <nop>ALLOWWEBCHANGE = &lt; list of users and groups &gt;
d94 2
a95 2
		* Set <nop>DENYTOPICRENAME = &lt; list of users and groups &gt;
		* Set <nop>ALLOWTOPICRENAME = &lt; list of users and groups &gt;
d97 2
a98 1
	* DENYTOPICCRENAME defines users or groups that *are not* allowed to rename the topic. It is a comma delimited list of users and groups. Example: <br> =&nbsp; &nbsp; * Set <nop>DENYTOPICRENAME = %MAINWEB%.<nop>SomeBadBoy, %MAINWEB%.<nop>SomeBadGirl, %MAINWEB%.<nop>SomeHackerGroup=
d100 2
a101 1
	* ALLOWTOPICRENAME defines users or groups that *are* allowed to rename the topic. It is a comma delimited list of users and groups. Example: <br> =&nbsp; &nbsp; * Set <nop>ALLOWTOPICRENAME = %MAINWEB%.<nop>SomeGoodGuy, %MAINWEB%.<nop>SomeGoodGirl, %MAINWEB%.<nop>TWikiAdminGroup=
d110 2
a111 2
		* Set <nop>DENYWEBRENAME = &lt; list of users and groups &gt;
		* Set <nop>ALLOWWEBRENAME = &lt; list of users and groups &gt;
d124 2
a125 2
	* Set <nop>DENYWEBVIEW = &lt; list of users and groups &gt;
	* Set <nop>ALLOWWEBVIEW = &lt; list of users and groups &gt;
d128 1
a128 1
	* Set <nop>NOSEARCHALL = on
d136 1
a136 40
<font size="2">%X% __THIS SECTION CONTAINS WORKAROUNDS.__ _Perhaps unconventional for official documentation, but practical, the following method for extending TWiki functionality involves modifying core TWiki, making it essentially not a feature but a hack. Still, it is officially TWiki developer-approved and documented, and will no doubt be included in some form in an upcoming edition of TWiki._ </font>

*To selectively restrict web access* with the security of Basic Authentication, there is a reliable workaround that involves some straightforward code modification:
	1. Set aside the ==view== script (rename) and create a ==view== subdirectory in its place.
	1. In the ==view== subdirectory, create a separate copy of a modified viewing script for each web, and create ==.htaccess== settings for the restricted webs.
		* %T% You can use symbolic links to a single copy of the viewing script to make any script updates that much easier.

<blockquote style="background-color:#f5f5f5">
*Example of viewing script* ==redirect==
<verbatim>
#!/usr/bin/perl -w
#

chdir '..';

# Adjust SCRIPT and PATH_INFO variables to account for the changed directory
my $web = $ENV{SCRIPT_NAME};
$web	 =~ s#^.*/view(/[^/]*).*$#$1#; # isolate the path element after "view"
$ENV{PATH_TRANSLATED} =~ s#(/[^/]*)$#$web$1#;
$ENV{PATH_INFO}		 =~ s#(/[^/]*)$#$web$1#;
$ENV{SCRIPT_NAME}	  =~ s#/view$web#/view#;
$ENV{SCRIPT_FILENAME} =~ s#/view$web#/view#;

# open (LOG, '>>/tmp/redirect.log');
# print LOG join ("\n", scalar localtime (time ()), %ENV);
# close LOG;
exec ('/usr/bin/perl', '-wT', 'view.orig') or

print <<EOF;
Content-type: text/plain

Error executing /cgi-bin/view.orig: $?
Click the BACK button in your browser and contact webmaster\@@bcs-oops.org.

EOF
</verbatim>
</blockquote>
	* __(mod by Main.ImmoHuneke - 16 Mar 2002)__

*A SECOND OPTION:* A less reliable workaround that doesn't involve code changes, but does require renaming a script, can provide the same generally unrestricted viewing access, with authentication only on selected webs:
d141 5
a145 4
		* When a user accesses a web where you enabled view restriction, %WIKITOOLNAME% will redirect from the =view= script to the =viewauth= script once (this happens only if the user has never edited a topic). Doing so will ask for authentication. The =viewauth= script shows the requested topic if the user could log on and if the user is authorized to see that web.
		* If you enable view restriction for a web, it is recommended to restrict search "all webs" from searching this web. Enable this restriction with the ==NOSEARCHALL== variable in its WebPreferences, like:
			* Set <nop>NOSEARCHALL = on
		* It is not recommended to restrict view access to individual topics since all content is searchable _within_ a web.
d168 2
a169 1
-- Main.MikeMannix - 01 Apr 2002
@


1.21
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="MikeMannix" date="1016622944" format="1.0" version="1.21"}%
d60 1
a60 1
Denying editing of a topic also restricts attaching files to it; both privileges are assigned together.
d120 5
a124 4
		* Set <nop>DENYWEBVIEW = &lt; list of users and groups &gt;
		* Set <nop>ALLOWWEBVIEW = &lt; list of users and groups &gt;
	* If keeping a hidden web out of general use is a consideration, you should also prevent the "all webs" search option from accessing each hidden web, by enabling the ==NOSEARCHALL== variable in WebPreferences:
		* Set <nop>NOSEARCHALL = on
d126 3
a128 2
	* %H%This method only works if the ==view== script is authenticated, which means that all users have to login, even for read-only access. (An open guest account, like Main.TWikiGuest, can get around this, allowing anyone to login with, for example, view-only access for public webs.) TWikiInstallationGuide has more on Basic Authentication, using the ==.htaccess== file.
	* %X% *Hiding webs is not very secure*, as there is a way to circumvent the read access restriction. It can be useful in certain situations - for example, to simplify site organization and clutter, by hiding low traffic webs - but is not recommended for securing sensitive content.
d132 3
a134 1
To selectively restrict web access with the security of Basic Authentication, there is a reliable workaround that involves some straightforward code modification:
d139 1
a139 1
<blockquote>
d169 1
a169 1
	* __(Mod by Main.ImmoHuneke - 16 Mar 2002)__
d171 1
a171 1
*A SECOND OPTION:* A less reliable workaround that also requires code changes is available to provide the same unrestricted viewing access, with authentication required only on selected webs:
d173 3
a175 1
	1. *Enable* the ==$doRememberRemoteUser== flag in ==lib/TWiki.cfg== as described in TWikiUserAuthentication. %WIKITOOLNAME% will now remember the IP address of an authenticated user.	 1. *Copy* the ==view== script to ==viewauth== (or better, create a symbolic link)	 1. *Add* ==viewauth== to the list of authenticated scripts in the .htaccess file.
d193 2
a194 2
By mistyping a user or group name in the ALLOWTOPICCHANGE setting, it's possible to lock a topic so that it no-one can edit it from a browser. To avoid this:
	* Set the =$superAdminGroup= variable in =lib/TWiki.cfg= to the name of a group of users that are always allowed to edit/view topics.
d202 1
a202 1
-- Main.MikeMannix - 20 Mar 2002
@


1.20
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="MikeMannix" date="1007283720" format="1.0" version="1.20"}%
a8 2
---++ Overview

d30 1
a30 1
Access control is based on users and groups. Users are defined by their WikiNames, an then organized into unlimited combinations under different user groups.  
d113 3
a115 1
---++ Restricting Read Access
d117 1
a117 1
You can define restrictions of who is allowed to view a %WIKITOOLNAME% web.
d119 1
a119 1
	* Define one or both of these variable in the %WEBPREFSTOPIC% topic:
d122 18
d141 1
a141 1
---+++ Known Issues
d143 12
a154 2
	* The view restriction is not suitable for very sensitive content since there is a way to circumvent the read access restriction.
	* Read access restriction only works if the view script is authenticated, that means that users need to log on also just to read topics. TWikiInstallationGuide has more on Basic Authentication based on the ==.htaccess== file.
d156 10
a165 1
---++++ Selective Unrestricted Web Access
d167 7
a173 9
	* There is a workaround if you prefer to have unrestricted access to view topics located in normal webs, and to authenticate users only for webs where view restriction is enabled:
		1. *Omit* the ==view== script from the =.htaccess= file.
		1. *Enable* the ==$doRememberRemoteUser== flag in ==lib/TWiki.cfg== as described in TWikiUserAuthentication. %WIKITOOLNAME% will now remember the IP address of an authenticated user.
		1. *Copy* the ==view== script to ==viewauth== (or better, create a symbolic link)
		1. *Add* ==viewauth== to the list of authenticated scripts in the .htaccess file.
			* When a user accesses a web where you enabled view restriction, %WIKITOOLNAME% will redirect from the =view= script to the =viewauth= script once (this happens only if the user has never edited a topic). Doing so will ask for authentication. The =viewauth= script shows the requested topic if the user could log on and if the user is authorized to see that web.
			* If you enable view restriction for a web, it is recommended to restrict search "all webs" from searching this web. Enable this restriction with the ==NOSEARCHALL== variable in its WebPreferences, like:
				* Set <nop>NOSEARCHALL = on
			* It is not recommended to restrict view access to individual topics since all content is searchable _within_ a web.
d196 1
a196 1
-- Main.MikeMannix - 02 Dec 2001	
@


1.19
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="MikeMannix" date="1000616943" format="1.0" version="1.19"}%
d44 1
a44 1
	1. *Create* a new topic with A name that ends in *Group*, =SomeGroup=
d49 2
a50 2
		* GROUP is a comma-separated list of users and of other groups:<br>
	  ==&nbsp; &nbsp; * Set <nop>GROUP = %MAINWEB%.<nop>SomeUser, %MAINWEB%.<nop>OtherUser, %MAINWEB%.<nop>SomeOtherGroup==
d52 3
a54 1
		* ALLOWTOPICCHANGE defines who is allowed to change the group topic; it is a comma delimited list of users and groups. You typically want to restrict that to the members of the group itself, so it should contain the name of the topic,<br> =&nbsp; &nbsp; * Set <nop>ALLOWTOPICCHANGE = %MAINWEB%.<nop>TWikiAdminGroup= <br> for the <nop>TWikiAdminGroup topic. (This prevents users not in the group from editing the topic and from gaining unauthorized membership to the group.)
d140 9
d161 1
a161 2
-- PeterThoeny - 16 Mar 2001 <br />
-- AndreaSterbini - 11 Apr 2001 <br />
@


1.18
log
@none
@
text
@d1 1
a1 3
%META:TOPICINFO{author="PeterThoeny" date="1000455102" format="1.0" version="1.18"}%
%INCLUDE{"UtilTempDocNote"}%

d143 1
a143 1
<blockquote style="background-color:#f0f0f0">
d150 2
a151 4
-- PeterThoeny - 16 Mar 2001 <br>
-- AndreaSterbini - 11 Apr 2001 <br> 
%STOPINCLUDE%
__Related topics:__ %WIKIPREFSTOPIC%, %WEBPREFSTOPIC% (in every web), %MAINWEB%.TWikiAdminGroup, %MAINWEB%.TWikiGroups
@


1.17
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="MikeMannix" date="1000279941" format="1.0" version="1.17"}%
d13 1
a13 1
TWikiAccessControl allows you restrict access to single topics and entire webs, by individual user and by user groups, in three main areas: view; edit &amp; attach; and rename/move/delete. These controls, combined with [[TWikiDocumentation#TWiki_User_Authentication][TWikiUserAuthentication]], let you easily create and manage an extremely flexible, fine-grained privilege system.
d17 1
a17 1
Open, freeform editing is the essence of the %TWIKIWEB%.WikiCulture - it's what makes TWiki different and often more effective than other collaboration tools. So, it is strongly recommended that decisions to restrict read or write access to a web or a topic are made with care. Experience shows that _unrestricted write access_ works very well because:
d24 1
a24 1
		* Edits can be undone by the %MAINWEB%.TWikiAdminGroup (the default administrators group; see [[#ManagingGroups][Managing Groups]]).
d38 1
a38 1
A user is created by with the <a target="TWikiRegistration" onClick="return launchWindow('TWiki','TWikiRegistration')" href="%SCRIPTULRPATH%/view%SCRIPTSUFFIX%/TWiki/TWikiRegistration">TWikiRegistration</a> form. The process generates a topic in the %MAINWEB% web in the new user's WikiName. The default visitor name is %MAINWEB%.TWikiGuest.
d40 1
a40 1
	* Users can be authenticated using Basic Authentication or SSL. [[TWikiDocumentation#TWikiAuthentication][Authentication]] is required in order to track user identities.
d126 1
a126 1
	* Read access restriction only works if the view script is authenticated, that means that users need to log on also just to read topics. [[TWikiDocumentation#TWikiInstallationGuide][TWiki Installation Guide]] has more on Basic Authentication based on the ==.htaccess== file.
d132 1
a132 1
		1. *Enable* the ==$doRememberRemoteUser== flag in ==lib/wikicfg.pm== as described in [[TWikiDocumentation#TWikiUserAuthentication][User Authentication]]. %WIKITOOLNAME% will now remember the IP address of an authenticated user.
@


1.16
log
@none
@
text
@d1 3
a3 1
%META:TOPICINFO{author="MikeMannix" date="999857173" format="1.0" version="1.16"}%
@


1.15
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="MikeMannix" date="999848020" format="1.0" version="1.15"}%
d5 1
a5 1
---## TWiki Access Control
d9 1
a9 1
---+++ Overview
d13 1
a13 1
---+++ An Important Control Consideration
d30 1
a30 1
---+++ Users and Groups
d34 1
a34 1
---++++ Managing Users
d41 1
a41 1
---++++ Managing Groups
d54 1
a54 1
---+++ Restricting Write Access
d58 1
a58 1
---++++ Deny Editing by Topic
d71 1
a71 1
---++++ Deny Editing by Web
d83 1
a83 1
---+++ Restricting Rename Access
d87 1
a87 1
---++++ Deny Renaming by Topic
d101 1
a101 1
---++++ Deny Renaming by Web
d113 1
a113 1
---+++ Restricting Read Access
d121 1
a121 1
---++++ Known Issues
d126 1
a126 1
---+++++ Selective Unrestricted Web Access
d139 1
a139 1
---+++ The <nop>SuperAdminGroup
@


1.14
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="MikeMannix" date="999674195" format="1.0" version="1.14"}%
d11 5
a15 1
%WIKITOOLNAME% allows you to define restrictions of who is allowed to view a %WIKITOOLNAME% web, make changes to topics or attach files.
a16 1
*IMPORTANT NOTE:* Think twice before restricting read or write access to a web or a topic, because an open system where everybody can contribute is the essence of the %TWIKIWEB%.WikiCulture. Experience shows that unrestricted write access works very well because:
d18 3
a20 1
	* Peer editing - edit anything on a page - keeps topics focussed.
d23 6
a28 1
		* Editing and refactoring (condensing a long topic) is encouraged (there's a safety net).
d32 1
a32 1
Access control is based on users and groups.
d36 3
a38 2
A user is created by with the <nop>TWikiRegistration form. The process generates a topic in the %MAINWEB% web in the new user's WikiName. The default visitor name is %MAINWEB%.TWikiGuest.
	* Users can be authenticated using Basic Authentication or SSL. [[TWikiDocumentation#TWikiAuthentication][TWiki Authentication]] has more.
d43 3
a45 4
Groups are defined by group topics in the %MAINWEB% web, like the %MAINWEB%.TWikiAdminGroup.
	* A group topic name must end in *_Group*
	* The group topic should define these two variables:
<blockquote style="background-color:#f0f0f0">
d48 5
a52 3
</blockquote>
	* GROUP defines the members of the group; it is a comma delimited list of users and other groups. Example: <br> ==&nbsp; &nbsp; * Set <nop>GROUP = %MAINWEB%.<nop>SomeUser, %MAINWEB%.<nop>OtherUser, %MAINWEB%.<nop>SomeOtherGroup==
	* ALLOWTOPICCHANGE defines who is allowed to change the group topic; it is a comma delimited list of users and groups. You typically want to restrict that to the members of the group itself, so it should contain the name of the topic, i.e. <br> =&nbsp; &nbsp; * Set <nop>ALLOWTOPICCHANGE = %MAINWEB%.<nop>TWikiAdminGroup= <br> for the <nop>TWikiAdminGroup topic. (This is to prevent users not in the group from editing the topic and gaining unauthorized membership to the group.)
d56 2
d60 4
a63 1
You can define restrictions of who is allowed to make changes to a topic or attach files to it.
d65 1
a65 3
Define one or both of these variables in a topic, preferably at the end of the topic:
	* Set <nop>DENYTOPICCHANGE = &lt; list of users and groups &gt;
	* Set <nop>ALLOWTOPICCHANGE = &lt; list of users and groups &gt;
d67 1
a67 1
DENYTOPICCHANGE defines users or groups that *are not* allowed to make changes to the topic. It is a comma delimited list of users and groups. Example: <br> =&nbsp; &nbsp; * Set <nop>DENYTOPICCHANGE = %MAINWEB%.<nop>SomeBadBoy, %MAINWEB%.<nop>SomeBadGirl, %MAINWEB%.<nop>SomeHackerGroup=
d69 1
a69 3
ALLOWTOPICCHANGE defines users or groups that *are* allowed to make changes to the topic. It is a comma delimited list of users and groups. Example: <br> =&nbsp; &nbsp; * Set <nop>ALLOWTOPICCHANGE = %MAINWEB%.<nop>SomeGoodGuy, %MAINWEB%.<nop>SomeGoodGirl, %MAINWEB%.<nop>TWikiAdminGroup=

DENYTOPICCHANGE is evaluated before ALLOWTOPICCHANGE. Access is denied if the authenticated person is in the DENYTOPICCHANGE list, or not in the ALLOWTOPICCHANGE list. Access is granted in case DENYTOPICCHANGE and ALLOWTOPICCHANGE is not defined.
d73 1
a73 1
You can define restrictions of who is allowed to make changes to a %WIKITOOLNAME% web. This includes creating new topics, changing topics or attaching files.
d75 3
a77 3
Define one or both of these variable in the %WEBPREFSTOPIC% topic:
	* Set <nop>DENYWEBCHANGE = &lt; list of users and groups &gt;
	* Set <nop>ALLOWWEBCHANGE = &lt; list of users and groups &gt;
d79 1
a79 1
The same rules apply like the one for Access Control for Individual Topics; with these additions:
d85 1
a85 1

d89 1
a89 1
You can define restrictions of who is allowed to rename a topic.  Note that users need this permission in addition to the CHANGE permission in order to rename a topic.  They also need CHANGE access to change references in referring topics.
d91 3
a93 3
Define one or both of these variables in a topic, preferably at the end of the topic:
	* Set <nop>DENYTOPICRENAME = &lt; list of users and groups &gt;
	* Set <nop>ALLOWTOPICRENAME = &lt; list of users and groups &gt;
d95 1
a95 1
DENYTOPICCRENAME defines users or groups that *are not* allowed to rename the topic. It is a comma delimited list of users and groups. Example: <br> =&nbsp; &nbsp; * Set <nop>DENYTOPICRENAME = %MAINWEB%.<nop>SomeBadBoy, %MAINWEB%.<nop>SomeBadGirl, %MAINWEB%.<nop>SomeHackerGroup=
d97 1
a97 1
ALLOWTOPICRENAME defines users or groups that *are* allowed to rename the topic. It is a comma delimited list of users and groups. Example: <br> =&nbsp; &nbsp; * Set <nop>ALLOWTOPICRENAME = %MAINWEB%.<nop>SomeGoodGuy, %MAINWEB%.<nop>SomeGoodGirl, %MAINWEB%.<nop>TWikiAdminGroup=
d99 1
a99 1
DENYTOPICRENAME is evaluated before ALLOWTOPICRENAME. Access is denied if the authenticated person is in the DENYTOPICRENAME list, or not in the ALLOWTOPICRENAME list. Access is granted in case DENYTOPICRENAME and ALLOWTOPICRENAME is not defined.
d103 1
a103 1
You can define restrictions of who is allowed to do renames for a %WIKITOOLNAME% web.
d105 3
a107 3
Define one or both of these variable in the %WEBPREFSTOPIC% topic:
	* Set <nop>DENYWEBRENAME = &lt; list of users and groups &gt;
	* Set <nop>ALLOWWEBRENAME = &lt; list of users and groups &gt;
d109 1
a109 1
The same rules apply like the one for Access Control for Individual Topics; with these additions:
d117 3
a119 3
Define one or both of these variable in the %WEBPREFSTOPIC% topic:
	* Set <nop>DENYWEBVIEW = &lt; list of users and groups &gt;
	* Set <nop>ALLOWWEBVIEW = &lt; list of users and groups &gt;
d129 8
a136 8
		* Leave the ==view== script non-authenticated in the =.htaccess= file.
		* Enable the ==$doRememberRemoteUser== flag in ==lib/wikicfg.pm== as described in [[TWikiDocumentation#TWikiUserAuthentication][User Authentication]]. %WIKITOOLNAME% will now remember the IP address of an authenticated user.
		* Copy the ==view== script to ==viewauth== (or better, create a symbolic link)
		* Add ==viewauth== to the list of authenticated scripts in the .htaccess file.
		* When a user accesses a web where you enabled view restriction, %WIKITOOLNAME% will redirect from the =view= script to the =viewauth= script once (this happens only if the user has never edited a topic). Doing so will ask for authentication. The =viewauth= script shows the requested topic if the user could log on and if the user is authorized to see that web.
	* If you enable view restriction for a web, it is recommended to restrict search "all webs" from searching this web. Enable this restriction with the ==NOSEARCHALL== variable in its WebPreferences, like:
		* Set <nop>NOSEARCHALL = on
	* It is not recommended to restrict view access to individual topics since all content is searchable _within_ a web.
d141 3
a143 2
The above schema can lock completely a topic in case of a typing error of the ALLOWTOPICCHANGE setting (see [[TWiki:Codev/UnchangeableTopicBug][UnchangeableTopicBug]] for more detail). To avoid this:
	* Set the ==$superAdminGroup== variable in ==lib/TWiki.cfg== to the name of a group of users that are always allowed to edit/view topics.
d147 1
@


1.13
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="MikeMannix" date="999580216" format="1.0" version="1.13"}%
d125 1
@


1.12
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="MikeMannix" date="999260330" format="1.0" version="1.12"}%
d7 4
d14 5
a18 4
	* There is enough peer pressure to post only conform content.
	* Content does not get lost because topics are under revision control.
	* A topic revision can be undone by a member of the %MAINWEB%.TWikiAdminGroup in case needed.

d24 7
a30 2
__Users__ are defined by the user topics in the %MAINWEB% web, i.e. %MAINWEB%.TWikiGuest
	* Users can be authenticated using basic authentication or SSL. <A href="TWikiDocumentation#installation">Installation Notes</A> has more.
d32 2
a33 2
__Groups__ are defined by group topics in the %MAINWEB% web, i.e. %MAINWEB%.TWikiAdminGroup
	* A group topic name must end in *...Group*
d35 1
d38 2
a39 1
	* GROUP defines the members of the group; it is a comma delimited list of users and other groups. Example: <br> =&nbsp; &nbsp; * Set <nop>GROUP = %MAINWEB%.<nop>SomeUser, %MAINWEB%.<nop>OtherUser, %MAINWEB%.<nop>SomeOtherGroup=
d42 1
d44 1
a44 1
---+++ Write Access Restriction by Topic
d58 1
a58 1
---+++ Write Access Restriction by Web
d70 5
a74 1
---+++ Rename Access Restriction by Topic
d88 1
a88 1
---+++ Rename Access Restriction by Web
d100 1
a100 1
---+++ Read Access Restriction by Web
d108 1
a108 1
---+++ Read Restriction Known Issues
d111 4
a114 1
	* Read access restriction only works if the view script is authenticated, that means that users need to log on also just to read topics. <a href="TWikiDocumentation#installation">TWiki Installation</a> has more on basic authentication based on the =.htaccess= file.
d116 4
a119 4
		* Leave the =view= script non authenticated in the =.htaccess= file.
		* Enable the =$doRememberRemoteUser= flag in =wikicfg.pm= as described in <a href="TWikiDocumentation#authentication">TWiki Authentication</a>. %WIKITOOLNAME% will now remember the IP address of an authenticated user.
		* Copy the =view= script to =viewauth= (or better, create a symbolic link)
		* Add =viewauth= to the list of authenticated scripts in the .htaccess file.
d121 1
a121 1
	* If you enable view restriction for a web, it is recommended to restrict search "all webs" from searching this web. Enable this restriction with the =NOSEARCHALL= variable in its WebPreferences, like:
d123 1
a123 1
	* It is not recommended to restrict view access to individual topics since all content is searchable __within__ a web.
d127 3
a129 3
The above schema can lock completely a topic in case of a typing error of the ALLOWTOPICCHANGE setting (see [[http://www.twiki.org/cgi-bin/view/Codev/UnchangeableTopicBug][UnchangeableTopicBug]]). To avoid this:
	* set the =$superAdminGroup= variable in =TWiki.cfg= to the name of a group of users that are always allowed to edit/view topics. E.g.:
<pre>
d131 2
a132 2
</pre>
	* the default setting is not to have superusers
@


1.11
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="MikeMannix" date="999209840" format="1.0" version="1.11"}%
d91 1
a91 1
---++++ Read Access Restriction Notes
d95 1
a95 1
	* There is a workaround if you prefer to to have unrestricted access to view topics located in normal webs, and to authenticate users only for webs where view restriction is enabled:
d100 1
a100 1
		* When a user accesses a web where you enabled view restriction, %WIKITOOLNAME% will redirect from the =view= script to the =viewauth= script once (this hapens only if the user has never edited a topic). Doing so will ask for authentication. The =viewauth= script shows the requested topic if the user could log on and if the user is authorized to see that web.
a103 2
	* The view restriction is not suitable for very sensitive content since there is a way to circumvent the read access restriction.

d105 1
a105 1
---+++ The SuperAdminGroup
@


1.10
log
@none
@
text
@d1 4
a4 1
%META:TOPICINFO{author="MikeMannix" date="999078876" format="1.0" version="1.10"}%
d31 1
a31 1
---+++ Write Access Restriction for Individual Topics
d45 1
a45 1
---+++ Write Access Restriction for a Whole %WIKITOOLNAME% Web
d57 1
a57 1
---+++ Rename Access Restriction for Individual Topics
d71 1
a71 1
---+++ Rename Access Restriction for a Whole %WIKITOOLNAME% Web
d83 1
a83 1
---+++ Read Access Restriction for a Whole %WIKITOOLNAME% Web
d91 2
a92 1
_Notes for read access restriction:_
a105 1
-- PeterThoeny - 16 Mar 2001 <br>
d107 1
a107 1
__NOTE:__
d116 1
d118 2
a119 2

__Related topics:__ %WIKIPREFSTOPIC%, %WEBPREFSTOPIC% (in every web), %MAINWEB%.TWikiAdminGroup, %MAINWEB%.TWikiGroups
@


1.9
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="JohnTalintyre" date="997199070" format="1.0beta2" version="1.9"}%
d102 3
d106 6
a111 1
__Related topics:__ %WIKIPREFSTOPIC%, %WEBPREFSTOPIC% (in every web), %MAINWEB%.TWikiAdminGroup, %MAINWEB%.TWikiGroups
d113 3
a115 1
-- PeterThoeny - 16 Mar 2001 <br>
@


1.8
log
@none
@
text
@d1 1
d53 26
@


1.7
log
@none
@
text
@d68 1
a68 1
		* Enable authentication for the =viewauth= script in the =.htaccess= file.
@


1.6
log
@none
@
text
@d1 2
d11 1
a11 1
__Users and Groups__
d27 1
a27 1
__Write Access Restriction for Individual Topics__
d41 1
a41 1
__Write Access Restriction for a Whole %WIKITOOLNAME% Web__
d53 1
a53 1
__Read Access Restriction for a Whole %WIKITOOLNAME% Web__
d78 1
a78 1
-- Main.PeterThoeny - 20 Jan 2001 <br>
@


1.5
log
@none
@
text
@d60 1
@


1.4
log
@none
@
text
@d60 7
@


1.3
log
@none
@
text
@d1 1
a1 1
%WIKITOOLNAME% allows to define some restrictions of who is allowed to make changes and attach files to topics.
d3 1
a3 1
*IMPORTANT NOTE:* Think twice before restricting write access to a web or a topic, because an open system where everybody can contribute is the essence of the %TWIKIWEB%.WikiCulture. Experience shows that unrestricted write access works very well because:
d25 1
a25 1
__Access Control for Individual Topics__
d27 1
a27 1
You can define some restrictions of who is allowed to make changes and attach files to a topic.
d39 1
a39 1
__Access Control per %WIKITOOLNAME% Web__
d41 1
a41 1
You can define some restrictions of who is allowed to make changes and attach files to topics or create new topics in a %WIKITOOLNAME% web.
d51 15
d68 1
a68 1
-- Main.PeterThoeny - 28 Oct 2000 <br>
@


1.2
log
@none
@
text
@d43 1
a43 1
Define one or both of these variable in the WebPreferences topic:
d48 2
a49 2
	* DENYTOPICCHANGE (in topic) overrides DENYWEBCHANGE (in <nop>WebPreferences)
	* ALLOWTOPICCHANGE (in topic) overrides ALLOWWEBCHANGE (in <nop>WebPreferences)
d51 1
a51 1
__Related topics:__ TWikiPreferences, WebPreferences (in every web), %MAINWEB%.TWikiAdminGroup, %MAINWEB%.TWikiGroups
@


1.1
log
@none
@
text
@d3 5
a7 1
*IMPORTANT NOTE:* Is is recommended to use the access control feature only if absolutely necessary because it goes against the free WikiCulture, where everybody is invited to contribute to any topic.
d51 1
a51 1
__Related topics:__ TWikiPreferences, WebPreferences (in every web), %MAINWEB%.TWikiAdminGroup
@
