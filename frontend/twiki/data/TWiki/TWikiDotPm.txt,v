head	1.9;
access;
symbols;
locks; strict;
comment	@# @;


1.9
date	2015.11.29.10.27.03;	author TWikiContributor;	state Exp;
branches;
next	1.8;

1.8
date	2013.10.14.08.02.47;	author TWikiContributor;	state Exp;
branches;
next	1.7;

1.7
date	2013.02.16.23.22.26;	author TWikiContributor;	state Exp;
branches;
next	1.6;

1.6
date	2011.04.12.00.50.46;	author TWikiContributor;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.29.14.44.15;	author TWikiContributor;	state Exp;
branches;
next	1.4;

1.4
date	2008.01.22.03.21.36;	author TWikiContributor;	state Exp;
branches;
next	1.3;

1.3
date	2007.01.16.04.12.01;	author TWikiContributor;	state Exp;
branches;
next	1.2;

1.2
date	2006.06.25.16.26.33;	author TWikiContributor;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.01.12.01.24;	author TWikiContributor;	state Exp;
branches;
next	;


desc
@new-topic
@


1.9
log
@buildrelease
@
text
@---+ Package =TWiki=

TWiki operates by creating a singleton object (known as the Session
object) that acts as a point of reference for all the different
modules in the system. This package is the class for this singleton,
and also contains the vast bulk of the basic constants and the per-
site configuration mechanisms.

Global variables are avoided wherever possible to avoid problems
with CGI accelerators such as mod_perl.

---+++!! Public Data members
   * =request=          Pointer to the TWiki::Request
   * =response=         Pointer to the TWiki::Respose
   * =context=          Hash of context ids
   * moved: =loginManager=     TWiki::LoginManager singleton (moved to TWiki::Users)
   * =plugins=          TWiki::Plugins singleton
   * =prefs=            TWiki::Prefs singleton
   * =remoteUser=       Login ID when using ApacheLogin. Maintained for
                        compatibility only, do not use.
   * =requestedWebName= Name of web found in URL path or =web= URL parameter
   * =sandbox=          TWiki::Sandbox singleton
   * =scriptUrlPath=    URL path to the current script. May be dynamically
                        extracted from the URL path if {GetScriptUrlFromCgi}.
                        Only required to support {GetScriptUrlFromCgi} and
                        not consistently used. Avoid.
   * =security=         TWiki::Access singleton
   * =SESSION_TAGS=     Hash of TWiki variables whose value is specific to
                        the current request.
   * =store=            TWiki::Store singleton
   * =topicName=        Name of topic found in URL path or =topic= URL
                        parameter
   * =urlHost=          Host part of the URL (including the protocol)
                        determined during intialisation and defaulting to
                        {DefaultUrlHost}
   * =user=             Unique user ID of logged-in user
   * =users=            TWiki::Users singleton
   * =webName=          Name of web found in URL path, or =web= URL parameter,
                        or {UsersWebName}


%TOC%

---++ StaticMethod *getTWikiLibDir* <tt>() -> $path</tt>

Returns the full path of the directory containing TWiki.pm



---++ ObjectMethod *UTF82SiteCharSet* <tt>($utf8) -> $ascii</tt>

Auto-detect UTF-8 vs. site charset in string, and convert UTF-8 into site
charset.



---++ ObjectMethod *writeCompletePage* <tt>($text,$pageType,$contentType,$status)</tt>

Write a complete HTML page with basic header to the browser.
   * =$text= is the text of the page body (&lt;html&gt; to &lt;/html&gt; if it's HTML)
   * =$pageType= - May be "edit", which will cause headers to be generated that force
     caching for 24 hours, to prevent Codev.BackFromPreviewLosesText bug, which caused
     data loss with IE5 and IE6.
   * =$contentType= - page content type | text/html
   * =$status= - page status | 200 OK

This method removes noautolink and nop tags before outputting the page unless
$contentType is text/plain.



---++ ObjectMethod *generateHTTPHeaders* <tt>($pageType,$contentType,$status) -> $header</tt>

All parameters are optional.

   * =$pageType= - May be "edit", which will cause headers to be generated that force caching for 24 hours, to prevent Codev.BackFromPreviewLosesText bug, which caused data loss with IE5 and IE6.
   * =$contentType= - page content type | text/html
   * =$status= - page status | 200 OK

Implements the post-Dec2001 release plugin API, which requires the
writeHeaderHandler in plugin to return a string of HTTP headers, CR/LF
delimited. Filters any illegal headers. Plugin headers will override
core settings.

Does *not* add a =Content-length= header.



---++ StaticMethod *isRedirectSafe* <tt>($redirect)=>$ok</tt>

tests if the $redirect is an external URL, returning false if AllowRedirectUrl is denied



---++ ObjectMethod *redirect* <tt>($url,$passthrough,$action_redirectto,$viaCache)</tt>

   * $url - url or twikitopic to redirect to
   * $passthrough - (optional) parameter to **FILLMEIN**
   * $action_redirectto - (optional) redirect to where ?redirectto=
     points to (if it's valid)
   * $viaCache - forcibly cache a redirect CGI query. It cuts off all 
     the params in a GET url and replace with a "?$cache=..." param.

Redirects the request to =$url=, *unless*
   1 It is overridden by a plugin declaring a =redirectCgiQueryHandler=.
   1 =$session->{request}= is =undef= or
   1 $query->param('noredirect') is set to a true value.
Thus a redirect is only generated when in a CGI context.

Normally this method will ignore parameters to the current query. Sometimes,
for example when redirecting to a login page during authentication (and then
again from the login page to the original requested URL), you want to make
sure all parameters are passed on, and for this $passthrough should be set to
true. In this case it will pass all parameters that were passed to the
current query on to the redirect target. If the request_method for the
current query was GET, then all parameters will be passed by encoding them
in the URL (after ?). If the request_method was POST, then there is a risk the
URL would be too big for the receiver, so it caches the form data and passes
over a cache reference in the redirect GET.

NOTE: Passthrough is only meaningful if the redirect target is on the same
server. "$viaCache" is meaningful only if "$action_redirectto" is false and 
"$passthru" is true.



---++ ObjectMethod *cacheQuery* <tt>() -> $queryString</tt>

Caches the current query in the params cache, and returns a rewritten
query string for the cache to be picked up again on the other side of a
redirect.

We can't encode post params into a redirect, because they may exceed the
size of the GET request. So we cache the params, and reload them when the
redirect target is reached.



---++ StaticMethod *isValidWikiWord* <tt>($name) -> $boolean</tt>

Check for a valid WikiWord or WikiName



---++ StaticMethod *isValidTopicName* <tt>($name) -> $boolean</tt>

Check for a valid topic name



---++ StaticMethod *isValidAbbrev* <tt>($name) -> $boolean</tt>

Check for a valid ABBREV (acronym)



---++ StaticMethod *isValidWebName* <tt>($name,$system) -> $boolean</tt>

STATIC Check for a valid web name. If $system is true, then
system web names are considered valid (names starting with _)
otherwise only user web names are valid

If $TWiki::cfg{EnableHierarchicalWebs} is off, it will also return false
when a nested web name is passed to it.



---++ ObjectMethod *modeAndMaster* <tt>($web)</tt>
Returns the following hash reference such as this:
<verbatim>
('', undef)
</verbatim>

and this:
<verbatim>
('slave', { # master site data
    siteName         => 'na',
    webScriptUrlTmpl => 'http://twiki.example.com/cgi-bin//Web',
    scriptSuffix     => '',
    webViewUrl       => 'http://twiki.example.com/Web',
})
</verbatim>

The first value is the mode of the web: either 'local', 'master', 'slave',
or 'read-only'. The second value is defined only when the master site is
defined for the web.


---++ ObjectMethod *getSkin* <tt>() -> $string</tt>

Get the currently requested skin path



---++ ObjectMethod *getScriptUrl* <tt>($absolute,$script,$web,$topic,...) -> $scriptURL</tt>

Returns the URL to a TWiki script, providing the web and topic as
"path info" parameters.  The result looks something like this:
"http://host/twiki/bin/$script/$web/$topic".
   * =...= - an arbitrary number of name,value parameter pairs that will be
     url-encoded and added to the url. The special parameter name '#' is
     reserved for specifying an anchor. e.g.
     <tt>getScriptUrl('x','y','view','#'=>'XXX',a=>1,b=>2)</tt> will give
     <tt>.../view/x/y?a=1&b=2#XXX</tt> %BR%

If $absolute is set, generates an absolute URL. $absolute is advisory only;
TWiki can decide to generate absolute URLs (for example when run from the
command-line) even when relative URLs have been requested.

The default script url is taken from {ScriptUrlPath}, unless there is
an exception defined for the given script in {ScriptUrlPaths}. Both
{ScriptUrlPath} and {ScriptUrlPaths} may be absolute or relative URIs. If
they are absolute, then they will always generate absolute URLs. if they
are relative, then they will be converted to absolute when required (e.g.
when running from the command line, or when generating rss). If
$script is not given, absolute URLs will always be generated.

If either the web or the topic is defined, will generate a full url
(including web and topic). Otherwise will generate only up to the script 
name. An undefined web will default to the main web name.

The returned URL takes ReadOnlyAndMirrorWebs into account.
If the specified =$web= is slave on this site, with the scripts
=edit=, =save=, =attach=, =upload=, and =rename=, this method returns
the URLs on the master site because it does not make sense to execute
those scripts on the master site of the web.

Even with the other scripts, you may need to get the URLs on the master site.
You can get those URLs by providing =$master =&gt; 1= as a name value pair.


---++ ObjectMethod *getDiskInfo* <tt>($web,$site,$diskID) -> ($dataDir,$pubDir,$diskID)</tt>

You can specify either $web or $diskID, not both.



---++ ObjectMethod *getDiskList* <tt>() -> ('',1,2,...)</tt>



---++ ObjectMethod *getDataDir* <tt>($web,$diskID) -> $dataDir</tt>

You can specify either $web or $diskID, not both.



---++ ObjectMethod *getPubDir* <tt>($web,$diskID) -> $pubDir</tt>

You can specify either $web or $diskID, not both.



---++ ObjectMethod *getPubUrl* <tt>($absolute,$web,$topic,$attachment) -> $url</tt>

Composes a pub url. If $absolute is set, returns an absolute URL.
If $absolute is set, generates an absolute URL. $absolute is advisory only;
TWiki can decide to generate absolute URLs (for example when run from the
command-line) even when relative URLs have been requested.

$web, $topic and $attachment are optional. A partial URL path will be
generated if one or all is not given.



---++ ObjectMethod *cacheIconData* <tt>($action)</tt>

Cache icon data based on action:
   * 'delete' - delete cache file
   * 'read'   - read cache file
   * 'expire' - expire (invalidate) cache if needed
   * 'save'   - save cache file



---++ ObjectMethod *formatIcon* <tt>($iconName,$format,$default) -> $icon</tt>

Format an icon based on name and format parameter. The format parameter handles 
these variables (with example):
   * $name: Name of icon ('home')
   * $type: Type of icon ('gif')
   * $filename: Icon filename ('home.gif')
   * $web: Web where icon is located ('TWiki')
   * $topic: Topic where icon is located ('TWikiDocGraphics')
   * $description: Icon description ('Home')
   * $width: Width of icon ('16')
   * $height: Height of icon ('16')
   * $img: Full img tag of icon ('<img src="/pub/TWiki/TWikiDocGraphics/home.gif" ... />')
   * $url: URL of icon ('http://example.com/pub/TWiki/TWikiDocGraphics/home.gif')
   * $urlpath: URL path of icon ('/pub/TWiki/TWikiDocGraphics/home.gif')

The optional default parameter specifies the icon name in case the icon is not defined. 
Leave empty if you assume icon files exist in the default location.



---++ ObjectMethod *normalizeWebTopicName* <tt>($theWeb,$theTopic) -> ($theWeb,$theTopic)</tt>

Normalize a Web<nop>.<nop>TopicName

See TWikiFuncDotPm for a full specification of the expansion (not duplicated
here)

*WARNING* if there is no web specification (in the web or topic parameters)
the web defaults to $TWiki::cfg{UsersWebName}. If there is no topic
specification, or the topic is '0', the topic defaults to the web home topic
name.



---++ ObjectMethod *determineWebTopic* <tt>($pathInfo,$web,$topic) -> ($web,$topic,$requestedWeb)</tt>

Determine the web and topic names from PATH_INFO and web and topic names
explicitly provided.
And then sanitize them.



---++ ClassMethod *new* <tt>($loginName,$query,\%initialContext)</tt>

Constructs a new TWiki object. Parameters are taken from the query object.

   * =$loginName= is the login username (*not* the wikiname) of the user you
     want to be logged-in if none is available from a session or browser.
     Used mainly for side scripts and debugging.
   * =$query= the TWiki::Request query (may be undef, in which case an empty query
     is used)
   * =\%initialContext= - reference to a hash containing context
     name=value pairs to be pre-installed in the context hash



---++ ObjectMethod *renderer* <tt>()</tt>
Get a reference to the renderer object. Done lazily because not everyone
needs the renderer.



---++ ObjectMethod *attach* <tt>()</tt>
Get a reference to the attach object. Done lazily because not everyone
needs the attach.



---++ ObjectMethod *templates* <tt>()</tt>
Get a reference to the templates object. Done lazily because not everyone
needs the templates.



---++ ObjectMethod *i18n* <tt>()</tt>
Get a reference to the i18n object. Done lazily because not everyone
needs the i18ner.



---++ ObjectMethod *search* <tt>()</tt>
Get a reference to the search object. Done lazily because not everyone
needs the searcher.



---++ ObjectMethod *security* <tt>()</tt>
Get a reference to the security object. Done lazily because not everyone
needs the security.



---++ ObjectMethod *net* <tt>()</tt>
Get a reference to the net object. Done lazily because not everyone
needs the net.



---++ ObjectMethod *finish* <tt>()</tt>
Break circular references.



---++ ObjectMethod *writeLog* <tt>($action,$webTopic,$extra,$user)</tt>

   * =$action= - what happened, e.g. view, save, rename
   * =$wbTopic= - what it happened to
   * =$extra= - extra info, such as minor flag
   * =$user= - user who did the saving (user id)
Write the log for an event to the logfile



---++ ObjectMethod *writeWarning* <tt>($text)</tt>

Prints date, time, and contents $text to $TWiki::cfg{WarningFileName}, typically
'warnings.txt'. Use for warnings and errors that may require admin
intervention. Use this for defensive programming warnings (e.g. assertions).



---++ ObjectMethod *writeDebug* <tt>($text)</tt>

Prints date, time, and contents of $text to $TWiki::cfg{DebugFileName}, typically
'debug.txt'.  Use for debugging messages.



---++ StaticMethod *applyPatternToIncludedText* <tt>($text,$pattern) -> $text</tt>

Apply a pattern on included text to extract a subset



---++ ObjectMethod *inlineAlert* <tt>($template,$def,...) -> $string</tt>

Format an error for inline inclusion in rendered output. The message string
is obtained from the template 'oops'.$template, and the DEF $def is
selected. The parameters (...) are used to populate %PARAM1%..%PARAMn%



---++ StaticMethod *parseSections* <tt>($text) -> ($string,$sectionlistref)</tt>

Generic parser for sections within a topic. Sections are delimited
by STARTSECTION and ENDSECTION, which may be nested, overlapped or
otherwise abused. The parser builds an array of sections, which is
ordered by the order of the STARTSECTION within the topic. It also
removes all the SECTION tags from the text, and returns the text
and the array of sections.

Each section is a =TWiki::Attrs= object, which contains the attributes
{type, name, start, end}
where start and end are character offsets in the
string *after all section tags have been removed*. All sections
are required to be uniquely named; if a section is unnamed, it
will be given a generated name. Sections may overlap or nest.

See test/unit/Fn_SECTION.pm for detailed testcases that
round out the spec.



---++ ObjectMethod *expandVariablesOnTopicCreation* <tt>($text,$user,$web,$topic) -> $text</tt>

   * =$text= - text to expand
   * =$user= - This is the user expanded in e.g. %USERNAME. Optional, defaults to logged-in user.
   * =$web= - name of web, optional
   * =$topic= - name of topic, optional

Expand limited set of variables during topic creation. These are variables
expected in templates that must be statically expanded in new content.

# SMELL: no plugin handler



---++ StaticMethod *entityEncode* <tt>($text,$extras) -> $encodedText</tt>

Escape special characters to HTML numeric entities. This is *not* a generic
encoding, it is tuned specifically for use in TWiki.

HTML4.0 spec:
"Certain characters in HTML are reserved for use as markup and must be
escaped to appear literally. The "&lt;" character may be represented with
an <em>entity</em>, <strong class=html>&amp;lt;</strong>. Similarly, "&gt;"
is escaped as <strong class=html>&amp;gt;</strong>, and "&amp;" is escaped
as <strong class=html>&amp;amp;</strong>. If an attribute value contains a
double quotation mark and is delimited by double quotation marks, then the
quote should be escaped as <strong class=html>&amp;quot;</strong>.</p>

Other entities exist for special characters that cannot easily be entered
with some keyboards..."

This method encodes HTML special and any non-printable ascii
characters (except for \n and \r) using numeric entities.

FURTHER this method also encodes characters that are special in TWiki
meta-language.

$extras is an optional param that may be used to include *additional*
characters in the set of encoded characters. It should be a string
containing the additional chars.



---++ StaticMethod *entityDecode* <tt>($encodedText) -> $text</tt>

Decodes all numeric entities (e.g. &amp;#123;). _Does not_ decode
named entities such as &amp;amp; (use HTML::Entities for that)



---++ StaticMethod *urlEncodeAttachment* <tt>($text)</tt>

For attachments, URL-encode specially to 'freeze' any characters >127 in the
site charset (e.g. ISO-8859-1 or KOI8-R), by doing URL encoding into native
charset ($siteCharset) - used when generating attachment URLs, to enable the
web server to serve attachments, including images, directly.  

This encoding is required to handle the cases of:

    - browsers that generate UTF-8 URLs automatically from site charset URLs - now quite common
    - web servers that directly serve attachments, using the site charset for
      filenames, and cannot convert UTF-8 URLs into site charset filenames

The aim is to prevent the browser from converting a site charset URL in the web
page to a UTF-8 URL, which is the default.  Hence we 'freeze' the URL into the
site character set through URL encoding. 

In two cases, no URL encoding is needed:  For EBCDIC mainframes, we assume that 
site charset URLs will be translated (outbound and inbound) by the web server to/from an
EBCDIC character set. For sites running in UTF-8, there's no need for TWiki to
do anything since all URLs and attachment filenames are already in UTF-8.



---++ StaticMethod *urlEncode* <tt>($string) -> encodedstring</tt>

Encode by converting characters that are illegal in URLs to
their %NN equivalents. This method is used for encoding
strings that must be embedded _verbatim_ in URLs; it cannot
be applied to URLs themselves, as it escapes reserved
characters such as = and ?.

RFC 1738, Dec. '94:
    <verbatim>
    ...Only alphanumerics [0-9a-zA-Z], the special
    characters $-_.+!*'(), and reserved characters used for their
    reserved purposes may be used unencoded within a URL.
    </verbatim>

Reserved characters are $&+,/:;=?@@ - these are _also_ encoded by
this method.

This URL-encoding handles all character encodings including ISO-8859-*,
KOI8-R, EUC-* and UTF-8. 

This may not handle EBCDIC properly, as it generates an EBCDIC URL-encoded
URL, but mainframe web servers seem to translate this outbound before it hits browser
- see CGI::Util::escape for another approach.



---++ StaticMethod *urlDecode* <tt>($string) -> decodedstring</tt>

Reverses the encoding done in urlEncode.



---++ StaticMethod *isTrue* <tt>($value,$default) -> $boolean</tt>

Returns 1 if =$value= is true, and 0 otherwise. "true" means set to
something with a Perl true value, with the special cases that "off",
"false" and "no" (case insensitive) are forced to false. Leading and
trailing spaces in =$value= are ignored.

If the value is undef, then =$default= is returned. If =$default= is
not specified it is taken as 0.



---++ StaticMethod *topLevelWeb* <tt>($web) -> toplevelwebof$web</tt>

If $web is a top level web, it returns $web.
If $web is a subweb, it returns the top level web of $web.



---++ StaticMethod *spaceOutWikiWord* <tt>($word,$sep) -> $string</tt>

Spaces out a wiki word by inserting a string between each word component.
Word component boundaries are transitions from lowercase to uppercase or numeric, 
from numeric to uppercase or lowercase, and from uppercase to numeric characters.

Parameter $sep defines the separator between the word components, the default is a space.

Example: "ABC2015ProjectCharter" results in "ABC 2015 Project Charter"



---++ ObjectMethod *expandAllTags* <tt>(\$text,$topic,$web,$meta)</tt>
Expands variables by replacing the variables with their
values. Some example variables: %<nop>TOPIC%, %<nop>SCRIPTURL%,
%<nop>WIKINAME%, etc.
$web and $incs are passed in for recursive include expansion. They can
safely be undef.
The rules for tag expansion are:
   1 Tags are expanded left to right, in the order they are encountered.
   1 Tags are recursively expanded as soon as they are encountered -
     the algorithm is inherently single-pass
   1 A tag is not "encountered" until the matching }% has been seen, by
     which time all tags in parameters will have been expanded
   1 Tag expansions that create new tags recursively are limited to a
     set number of hierarchical levels of expansion



---++ ObjectMethod *enterContext* <tt>($id,$val)</tt>

Add the context id $id into the set of active contexts. The $val
can be anything you like, but should always evaluate to boolean
TRUE.

An example of the use of contexts is in the use of tag
expansion. The commonTagsHandler in plugins is called every
time tags need to be expanded, and the context of that expansion
is signalled by the expanding module using a context id. So the
forms module adds the context id "form" before invoking common
tags expansion.

Contexts are not just useful for tag expansion; they are also
relevant when rendering.

Contexts are intended for use mainly by plugins. Core modules can
use $session->inContext( $id ) to determine if a context is active.



---++ ObjectMethod *leaveContext* <tt>($id)</tt>

Remove the context id $id from the set of active contexts.
(see =enterContext= for more information on contexts)



---++ ObjectMethod *inContext* <tt>($id)</tt>

Return the value for the given context id
(see =enterContext= for more information on contexts)



---++ StaticMethod *registerTagHandler* <tt>($tag,$fnref)</tt>

STATIC Add a tag handler to the function tag handlers.
   * =$tag= name of the tag e.g. MYTAG
   * =$fnref= Function to execute. Will be passed ($session, \%params, $web, $topic )



---++ StaticMethod *registerRESTHandler* <tt>($subject,$verb,\&fn)</tt>

Adds a function to the dispatch table of the REST interface 
for a given subject. See TWikiScripts#rest for more info.

   * =$subject= - The subject under which the function will be registered.
   * =$verb= - The verb under which the function will be registered.
   * =\&fn= - Reference to the function.

The handler function must be of the form:
<verbatim>
sub handler(\%session,$subject,$verb) -> $text
</verbatim>
where:
   * =\%session= - a reference to the TWiki session object (may be ignored)
   * =$subject= - The invoked subject (may be ignored)
   * =$verb= - The invoked verb (may be ignored)

*Since:* TWiki::Plugins::VERSION 1.1



---++ ObjectMethod *handleCommonTags* <tt>($text,$web,$topic,$meta) -> $text</tt>

Processes %<nop>VARIABLE%, and %<nop>TOC% syntax; also includes
'commonTagsHandler' plugin hook.

Returns the text of the topic, after file inclusion, variable substitution,
table-of-contents generation, and any plugin changes from commonTagsHandler.

$meta may be undef when, for example, expanding templates, or one-off strings
at a time when meta isn't available.



---++ ObjectMethod *ADDTOHEAD* <tt>($args)</tt>

Add =$html= to the HEAD tag of the page currently being generated.

Note that TWiki variables may be used in the HEAD. They will be expanded
according to normal variable expansion rules.

---+++ =%<nop>ADDTOHEAD%=
You can write =%ADDTOHEAD{...}%= in a topic or template. This variable accepts the following parameters:
   * =_DEFAULT= optional, id of the head block. Used to generate a comment in the output HTML.
   * =text= optional, text to use for the head block. Mutually exclusive with =topic=.
   * =topic= optional, full TWiki path name of a topic that contains the full text to use for the head block. Mutually exclusive with =text=. Example: =topic="%WEB%.MyTopic"=.
   * =requires= optional, comma-separated list of id's of other head blocks this one depends on.
=%<nop>ADDTOHEAD%= expands in-place to the empty string, unless there is an error in which case the variable expands to an error string.

Use =%<nop>RENDERHEAD%= to generate the sorted head tags.



---+++ %<nop>RENDERHEAD%
=%RENDERHEAD%= should be written where you want the sorted head tags to be generated. This will normally be in a template. The variable expands to a sorted list of the head blocks added up to the point the RENDERHEAD variable is expanded. Each expanded head block is preceded by an HTML comment that records the ID of the head block.

Head blocks are sorted to satisfy all their =requires= constraints.
The output order of blocks with no =requires= value is undefined. If cycles
exist in the dependency order, the cycles will be broken but the resulting
order of blocks in the cycle is undefined.


---++ StaticMethod *initialize* <tt>($pathInfo,$remoteUser,$topic,$url,$query) -> ($topicName,$webName,$scriptUrlPath,$userName,$dataDir)</tt>

Return value: ( $topicName, $webName, $TWiki::cfg{ScriptUrlPath}, $userName, $TWiki::cfg{DataDir} )

Static method to construct a new singleton session instance.
It creates a new TWiki and sets the Plugins $SESSION variable to
point to it, so that TWiki::Func methods will work.

This method is *DEPRECATED* but is maintained for script compatibility.

Note that $theUrl, if specified, must be identical to $query->url()



---++ StaticMethod *readFile* <tt>($filename) -> $text</tt>

Returns the entire contents of the given file, which can be specified in any
format acceptable to the Perl open() function. Fast, but inherently unsafe.

WARNING: Never, ever use this for accessing topics or attachments! Use the
Store API for that. This is for global control files only, and should be
used *only* if there is *absolutely no alternative*.



---++ StaticMethod *suffixToMimeType* <tt>($filename) -> $mimeType</tt>

Returns the MIME type corresponding to the extension of the $filename based on
the file specified by {MimeTypesFileName}. If there is no extension or the
extension is not found in the {MimeTypesFileName} file, 'text/plain' is
returned.



---++ StaticMethod *expandStandardEscapes* <tt>($str) -> $unescapedStr</tt>

Expands standard escapes used in parameter values to block evaluation. The following escapes
are handled:

| *Escape:* | *Expands To:* |
| =$n= or =$n()= | New line. Use =$n()= if followed by alphanumeric character, e.g. write =Foo$n()Bar= instead of =Foo$nBar= |
| =$nop= or =$nop()= | Is a "no operation". |
| =$quot= | Double quote (="=) |
| =$aquot= | Apostrophe quote (='=) |
| =$percnt= | Percent sign (=%=) |
| =$dollar= | Dollar sign (=$=) |
| =$lt= | Less than sign (=<=) |
| =$gt= | Greater than sign (=>=) |


@


1.8
log
@buildrelease
@
text
@d311 8
d568 7
a574 2
Spaces out a wiki word by inserting a string (default: one space) between each word component.
With parameter $sep any string may be used as separator between the word components; if $sep is undefined it defaults to a space.
d726 9
@


1.7
log
@buildrelease
@
text
@d12 1
a12 1
---++ Public Data members
d57 1
a57 1
---++ ObjectMethod *writeCompletePage* <tt>($text,$pageType,$contentType)</tt>
d65 1
d72 1
a72 1
---++ ObjectMethod *generateHTTPHeaders* <tt>($pageType,$contentType,$contentLength) -> $header</tt>
d78 1
a78 1
   * =$contentLength= - content-length | no content-length will be set if this is undefined, as required by HTTP1.1
d95 1
a95 1
---++ ObjectMethod *redirect* <tt>($url,$passthrough,$action_redirectto)</tt>
d101 2
d122 2
a123 1
server.
d168 5
a172 1
---++ ObjectMethod *readOnlyMirrorWeb* <tt>($theWeb) -> ($mirrorSiteName,$mirrorViewURL,$mirrorLink,$mirrorNote)</tt>
d174 9
a182 4
If this is a mirrored web, return information about the mirror. The info
is returned in a quadruple:

| site name | URL | link | note |
d184 3
d204 1
a204 1
     <tt>.../view/x/y?a=1&b=2#XXX</tt>
d222 30
d551 7
d679 1
a679 1
---+++ %<nop}RENDERHEAD%
d722 1
@


1.6
log
@buildrelease
@
text
@d390 3
a394 2
   * =$web= - name of web
   * =$topic= - name of topic
@


1.5
log
@buildrelease
@
text
@d184 5
a188 1
   * =...= - an arbitrary number of name,value parameter pairs that will be url-encoded and added to the url. The special parameter name '#' is reserved for specifying an anchor. e.g. <tt>getScriptUrl('x','y','view','#'=>'XXX',a=>1,b=>2)</tt> will give <tt>.../view/x/y?a=1&b=2#XXX</tt>
d202 3
a204 1
If either the web or the topic is defined, will generate a full url (including web and topic). Otherwise will generate only up to the script name. An undefined web will default to the main web name.
d670 2
@


1.4
log
@buildrelease
@
text
@d13 2
a14 1
   * =cgiQuery=         Pointer to the CGI::
d29 1
a29 1
                        the current CGI request.
d50 1
a50 1
---++ StaticMethod *UTF82SiteCharSet* <tt>($utf8) -> $ascii</tt>
d71 1
a71 1
---++ ObjectMethod *generateHTTPHeaders* <tt>($query,$pageType,$contentType,$contentLength) -> $header</tt>
a74 1
   * =$query= CGI query object | Session CGI query (there is no good reason to set this)
d103 1
a103 1
   1 =$session->{cgiQuery}= is =undef= or
d214 1
a214 1
---++ ObjectMethod *getIconUrl* <tt>($absolute,$iconName) -> $iconURL</tt>
d216 5
a220 1
Map an icon name to a URL path.
d224 15
a238 1
---++ ObjectMethod *mapToIconFileName* <tt>($fileName,$default) -> $fileName</tt>
d240 2
a241 2
Maps from a filename (or just the extension) to the name of the
file that contains the image for that file type.
d266 1
a266 1
   * =$query= the CGI query (may be undef, in which case an empty query
a586 9
---++ StaticMethod *restDispatch* <tt>($subject,$verb)=>\&fn</tt>

Returns the handler  function associated to the given $subject and $werb,
or undef if none is found.

*Since:* TWiki::Plugins::VERSION 1.1



d600 1
a600 1
---++ ObjectMethod *addToHEAD* <tt>($id,$html)</tt>
d607 14
a620 2
The 'id' is used to ensure that multiple adds of the same block of HTML don't
result in it being added many times.
d622 4
@


1.3
log
@buildrelease
@
text
@d12 28
a44 2
STATIC method.

d49 1
a49 1
---++ ObjectMethod *UTF82SiteCharSet* <tt>($utf8) -> $ascii</tt>
d70 1
a70 1
---++ ObjectMethod *writePageHeader* <tt>($query,$pageType,$contentType,$contentLength)</tt>
d84 5
d90 1
d92 8
a99 1
---++ ObjectMethod *redirect* <tt>($url,$passthrough)</tt>
d107 10
a116 6
Normally this method will ignore parameters to the current query.
If $passthrough is set, then it will pass all parameters that were passed
to the current query on to the redirect target. If the request_method was
GET, then all parameters can be passed in the URL. If the
request_method was POST then it caches the form data and passes over a
cache reference in the redirect GET.
d118 2
a119 1
Passthrough is only meaningful if the redirect target is on the same server.
d159 3
d227 32
a258 1
---++ ObjectMethod *getOopsUrl* <tt>($template,@@options) -> $absoluteOopsURL</tt>
a259 6
Composes a URL for an "oops" error page. The @@options consists of a list
of key => value pairs. The following keys are used:
   * =-web= - web name
   * =-topic= - topic name
   * =-def= - optional template def within the main template file
   * =-params= - a single parameter, or a reference to an array of parameters  These are passed in the URL as '&param1=' etc.
d261 3
a263 1
Do _not_ include the "oops" part in front of the template name.
a264 1
Alternatively you can pass a reference to an OopsException in place of the template. All other parameters will be ignored.
a265 2
The returned URL ends up looking something like this:
"http://host/twiki/bin/oops/$web/$topic?template=$template&param1=$scriptParams[0]..."
d267 3
a269 2
Note: if {keep} is true in the params, then they will also be pushed into the
current query.
d273 3
a275 1
---++ ObjectMethod *normalizeWebTopicName* <tt>($theWeb,$theTopic) -> ($theWeb,$theTopic)</tt>
a276 1
Normalize a Web<nop>.<nop>TopicName
a277 1
See TWikiFuncDotPm for a full specification of the expansion (not duplicated here)
d279 3
a281 3
*WARNING* if there is no web specification (in the web or topic parameters) the web
defaults to $TWiki::cfg{UsersWebName}. If there is no topic specification, or the topic
is '0', the topic defaults to the web home topic name.
d285 3
a287 1
---++ ClassMethod *new* <tt>($loginName,$query,\%initialContext)</tt>
a288 1
Constructs a new TWiki object. Parameters are taken from the query object.
a289 5
   * =$loginName= is the username of the user you want to be logged-in if none is
     available from a session or browser. Used mainly for side scripts and debugging.
   * =$query= the CGI query (may be undef, in which case an empty query is used)
   * =\%initialContext= - reference to a hash containing context name=value pairs
     to be pre-installed in the context hash
d291 3
a295 1
---++ ObjectMethod *finish* <tt></tt>
d297 2
a298 5
Complete processing after the client's HTTP request has been responded
to. Right now this does two things:
   1 calling TWiki::Client to flushing the user's session (if any) to disk,
   2 breaking circular references to allow garbage collection in persistent
     environments
d307 1
a307 1
   * =$user= - user who did the saving (user object or string user name)
d362 1
a362 1
---++ ObjectMethod *expandVariablesOnTopicCreation* <tt>($text,$user) -> $text</tt>
d365 1
a365 1
   * =$user= - reference to user object. This is the user expanded in e.g. %USERNAME. Optional, defaults to logged-in user.
d368 2
d411 24
d444 6
a449 5
<verbatim>>
...Only alphanumerics [0-9a-zA-Z], the special
characters $-_.+!*'(), and reserved characters used for their
reserved purposes may be used unencoded within a URL.
</verbatim>
d453 6
a458 3
SMELL: For non-ISO-8859-1 $TWiki::cfg{Site}{CharSet}, need to convert to
UTF-8 before URL encoding. This encoding only supports 8-bit
character codes.
d487 17
d578 1
a578 1
---++ ObjectMethod *handleCommonTags* <tt>($text,$web,$topic) -> $text</tt>
d586 3
@


1.2
log
@buildrelease
@
text
@d24 1
d33 5
a37 1
$text is the HTML of the page body (&lt;html&gt; to &lt;/html&gt;)
d39 2
a40 1
This method removes noautolink and nop tags before outputting the page.
d60 14
a73 1
---++ ObjectMethod *redirect* <tt>($url,...)</tt>
d75 1
a75 3
Generate a CGI redirect to $url unless (1) $session->{cgiQuery} is undef or
(2) $query->param('noredirect') is set to a true value. Thus a redirect is
only generated when in a CGI context.
a76 2
The ... parameters are concatenated to the message written when printing
to STDOUT, and are ignored for a redirect.
d78 10
a87 2
Redirects the request to $url, via the CGI module object $query unless
overridden by a plugin declaring a =redirectCgiQueryHandler=.
d137 1
a137 1
   * =...= - an arbitrary number of name,value parameter pairs that will be url-encoded and added to the url. The special parameter name '#' is reserved for specifying an anchor. e.g. <tt>getScriptUrl('x','y','view','#'=>'XXX',a=>1,b=>2)</tt> will give <tt>.../view/x/y#XXX?a=1&b=2</tt>
d196 3
a203 12
<pre>
Input:                      Return:
  ( 'Web',  'Topic' )         ( 'Web',  'Topic' )
  ( '',     'Topic' )         ( 'Main', 'Topic' )
  ( '',     '' )              ( 'Main', 'WebHome' )
  ( '',     'Web/Topic' )     ( 'Web',  'Topic' )
  ( '',     'Web.Topic' )     ( 'Web',  'Topic' )
  ( 'Web1', 'Web2.Topic' )    ( 'Web2', 'Topic' )
  ( '%MAINWEB%', 'Web2.Topic' ) ( 'Main', 'Topic' )
  ( '%TWIKIWEB%', 'Web2.Topic' ) ( 'TWiki', 'Topic' )
</pre>
Note: Function renamed from getWebTopic
d205 1
a205 2
SMELL: WARNING: this function defaults the web and topic names.
Be very careful where you use it!
d207 3
d212 3
a214 1
---++ ClassMethod *new* <tt>($remoteUser,$query)</tt>
d217 5
a221 2
   * =$remoteUser= the logged-in user (login name)
   * =$query= the query
d226 1
d236 1
d267 1
d274 21
d296 1
d433 2
a434 1
---+++ registerRESTHandler( $subject, $verb, \&fn )
d453 4
a456 1
---+++ restDispatch( $subject, $verb) => \&fn
d462 2
d465 1
d475 1
d510 14
@


1.1
log
@buildrelease
@
text
@d206 4
a209 3
to. Right now this only entails one activity: calling TWiki::Client to
flushing the user's
session (if any) to disk.
@
