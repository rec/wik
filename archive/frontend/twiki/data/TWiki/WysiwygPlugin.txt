%META:TOPICINFO{author="TWikiContributor" date="1530865621" format="1.1" version="22"}%
---+!! Wysiwyg Plugin
<!--
   Contributions to this plugin are appreciated. Please update the plugin page at
   http://twiki.org/cgi-bin/view/Plugins/WysiwygPlugin or provide feedback at
   http://twiki.org/cgi-bin/view/Plugins/WysiwygPluginDev.
   If you are a TWiki contributor please update the plugin in the SVN repository.

   * Set SHORTDESCRIPTION = Translator framework for WYSIWYG editors
-->
<sticky>
<div class="twikiTocFloat">
%TOC{depth="3"}%
</div>
</sticky>
%SHORTDESCRIPTION%

Support for the integration of WYSIWYG (What-You-See-Is-What-You-Get) editors. On its own, the only thing this plugin gives you is a stand-alone HTML to TML (TWiki Markup Language) translator script. For WYSIWYG editing you will also need to install a specific editor package such as TinyMCEPlugin.

This plugin provides a generic framework that supports editing of topics using any browser-based HTML editor. It works by transforming TML (TWiki Markup Language) into HTML for the editor, and then transforming HTML back into TML on save.

---++ Features

   * Supports the input of malformed HTML
   * Full round-trip (TML -> XHTML -> TML)
   * Framework is editor-agnostic

---++ Details

---+++ What's in the package

The package includes the following pieces:

   * TML (TWiki Markup Language) to HTML translator
   * HTML to TML translator (with stand-alone script)
   * Generic TWiki plugin for automating the translation during editing

---+++ How it works

The plugin works by translating the topic text into HTML when someone edits a topic. The HTML is then fed to the WYSIWYG editor. On save, the edited HTML is run through the reverse translation before saving to the topic. TML is used in preference to HTML in the stored topic wherever possible, though HTML may be used if the translator can't find a suitable TML equivalent.

The default rendering that TWiki uses to generate HTML for display in browsers is 'lossy' - information in the TML is lost in the HTML output, and a round-trip (recovering the original TML from the HTML) is impossible. To solve this problem the plugin instead uses its own translation of TML to XHTML. The generated XHTML is annotated with CSS classes that support the accurate recovery of the original TML.

_Before you ask the obvious question, yes, the translator *could* be used to replace the TWiki rendering pipeline for generating HTML pages. In fact, the translator is taken almost directly from the implementation of the rendering pipeline for the TWiki-4 release_

Translation of the HTML back to TML uses the CPAN:HTML::Parser. This parser is used in preference to a more modern XML parser, because the WYSIWYG editor may not generate fully compliant XHTML. A strict parser would risk losing content. HTML::Parser is better at handling malformed HTML.

There is also the advantage that the translator can be used to *import* HTML from other sources - for example, existing web pages. Due to the simple nature of TML and the potential complexity of web pages, this translation is often lossy - i.e. there will be HTML features that can be entered by editors that will be lost in this translation step. This is especially noticeable with HTML tables.

---+++ Using the translators from Perl scripts

Both translators can be used directly from Perl scripts, for example to build your own stand-alone translators.

A stand-alone convertor script for HTML to TML is included in the installation. It can be found in =tools/html2tml.pl=.

---+++ Integrating a HTML Editor

The plugin can be used to integrate an HTML editor in a number of different ways.

   1 The HTML for the content-to-be-edited can be generated directly in the standard edit template.
   1 The HTML for the content-to-be-edited can be generated directly in a specialized edit template.
   1 A URL can be used to fetch the content-to-be-edited from the server, for use in an IFRAME.
   1 REST handlers can be called from Javascript to convert content.

---++++ Generating content directly in the standard edit template

This is the technique used by WYSIWYG editors that can sit on top of HTML
textareas, such as !TinyMCE. The topic content is pre-converted to HTML before inclusion in the standard edit template. These editors use plugins that have a =beforeEditHandler= and an =afterEditHandler=. These handlers are responsible for the conversion of topic text to HTML, and post-conversion of HTML back to TML.

   1 User hits "edit".
   1 Editor-specific plugin =beforeEditHandler= converts topic content to HTML by calling =TWiki::Plugins::WysiwygPlugin::TranslateTML2HTML=.
   1 User edits and saves
   1 Editor-specific plugin =afterEditHandler= converts HTML back to TML by calling =TWiki::Plugins::WysiwygPlugin::TranslateHTML2TML=.
   * !WysiwygPlugin should *not* be enabled in =configure=.
   * =WYSIWYGPLUGIN_WYSIWYGSKIN= should *not* be set.
   * Your plugin should set the =textareas_hijacked= context id, to signal to skins to suppress their textarea manipulation functions.
This is the recommended integration technique, if your editor can support it.

---++++ Generating content directly in a specialized edit template

This technique is useful when the editor requires the topic content in a variety of different formats at the same time. In this scenario the editor uses a custom edit template. The WYSIWYG content is made available for instantiation in that template in a number of different formats. =WYSIWYGPLUGIN_WYSIWYGSKIN= *must* be set for this to work.

The flow of control is as follows:

   1 User hits "edit" with the skin (or cover) set the same as =WYSIWYGPLUGIN_WYSIWYGSKIN=.
   1 The !WysiwygPlugin =beforeEditHandler= determines if the topic is WYSIWYG editable, and vetoes the edit if not by redirecting to the standard edit skin.
 the edit
   1 The =edit= template containing the JS editor is instantiated.
   1 The following variables are available for expansion in the template:
      * =%<nop>WYSIWYG_TEXT%= expands to the HTML of the content-to-be-edited. This is suitable for use in a =textarea=.
      * =%<nop>JAVASCRIPT_TEXT%= expands to the HTML of the content-to-be-edited in a javascript constant.
   1 User edits and saves
   1 The =afterEditHandler= in the !WyswiygPlugin sees that =wysiwyg_edit= is set, which triggers the conversion back to TML.

   * The HTML form in the edit template *must* include an =&lt;input= called =wysiwyg_edit= and set it to 1, to trigger the conversion from HTML back to TML.
   * =WYSIWYGPLUGIN_WYSIWYGSKIN= must be set to the name of the skin used for WYSIWYG editing. This is often the name of the editor e.g. =xinha=.

---++++ Fetching content from a URL

In this scenario, the edit template is generated *without* the content-to-be-edited. The content is retrieved from the server using a URL e.g. from an =IFRAME=.

The flow of control is as follows:
   1 As _Generating content directly in a specialized edit template_
   1 As _Generating content directly in a specialized edit template_
   1 As _Generating content directly in a specialized edit template_
   1 When the document loads in the browser, the JS editor invokes a content URL (using an =IFRAME= or a =XmlHttpRequest=) to obtain the HTML document to be edited
      * The content URL is just a TWiki =view= URL with the =wysiwyg_edit=
        parameter set.
      * The !WysiwygPlugin recognises the =wysiwyg_edit= parameter and uses the
        TML2HTML translator to prepare the text, which is then returned
        as =text/plain= to the browser.
      * Two TWiki variables, =%<nop>OWEB%= and =%<nop>OTOPIC%=, can be used in the content URL in the edit template to refer to the source topic for the content.
   1 After edit handling is as for _Generating content directly in a specialized edit template_

---+++ Other techniques

---++++ Asynchronous saves

Editors can use =XmlHttpRequest= to perform saves, by POSTing to the TWiki =save= script with the =wysiwyg_edit= parameter set to =1=. This parameter tells the =beforeSaveHandler= in the !WysiwygPlugin to convert the content back to TML. See %SYSTEMWEB%.CommandAndCGIScripts for details of the other parameters to the =save= script.

Once the save script has completed it responds with a redirect, either to an Oops page if the save failed, or to the appropriate post-save URL (usually a =view=). The editor must be ready to handle this redirect.

---++++ Handling Attachments

Attachment uploads can be handled by URL requests from the editor template to the TWiki =upload= script. The =upload= script normally redirects to the containing topic; a behavior that you usually don't want in an editor! There are two ways to handle this:
   * If the uploads are done in an =IFRAME= or via =XmlHttpRequest=, then the
     302 redirect at the end of the upload can simply be ignored.
   * You can pass =noredirect= to the =upload= script to suppress the redirect. In this case
     you will get a =text/plain= response of =OK= followed by a message if everything went well, or an error message if it did not.

---++++ REST handlers

If you are confident in Javascript you can use REST handlers with =XmlHttpRequest= to convert content from TML to HTML and back again.

The plugin defines the following REST handlers:

=.../rest/WysiwygPlugin/html2tml?topic=Web.Topic;text=htmltexttotranslate=

Converts the HTML text to TML. =topic= *must* be specified.

=.../rest/WysiwygPlugin/tml2html?topic=Web.Topic;text=tmltexttotranslate=

Converts the TML text to HTML. =topic= *must* be specified. The response is a =text/plain= page of converted content.

---++ Plugin Installation Instructions

This plugin is pre-installed. TWiki administrators can upgrade the plugin as needed on the TWiki server.
%TWISTY{
 mode="div"
 showlink="Show details %ICONURL{toggleopen}% "
 hidelink="Hide details %ICONURL{toggleclose}% "
}%
   * For an __automated installation__, run the [[%SCRIPTURL{configure}%][configure]] script and follow "Find More Extensions" in the in the __Extensions__ section.
      * See the [[http://twiki.org/cgi-bin/view/Plugins/BuildContribInstallationSupplement][installation supplement]] on TWiki.org for more information.

   * Or, follow these __manual installation__ steps:
      * Download the ZIP file from the extension home on twiki.org (see below).
      * Unzip ==%TOPIC%.zip== in your twiki installation directory.
      * Set the ownership of the extracted directories and files to the webserver user.
      * Install the dependencies (if any).

   * Plugin __configuration and testing__: 
      * Run the [[%SCRIPTURL{configure}%][configure]] script and enable the plugin in the __Plugins__ section.
      * Configure additional plugin settings in the __Extensions__ section if needed.
      * Test if the installation was successful using the examples provided.

%ENDTWISTY%

---++ Plugin Configuration Settings

---+++ Translator control
%INCLUDE{"%SYSTEMWEB%.WysiwygPluginSettings"}%

*Implementors note:* If you are using your own before/after edit handlers, you can call =TWiki::Plugins::WysiwygPlugin::isWysiwygEditable()= to check these controls.

---++ Known issues

---+++ Incompatible with "non-standard" syntax

The !WysiwygPlugin is incompatible with plugins that expand non-standard syntax e.g. TWiki:Plugins.MathModePlugin (!WysiwygPlugin)

Plugins that extend the syntax using TWiki variables, such as =%MYVARIABLE%=, should work fine.

*Implementors note:* Plugins that use XML-like tags may call =TWiki::Plugins::WysiwygPlugin::addXMLTag()= from their =initPlugin= handlers to make the !WysiwygPlugin protect the content between XML-like tags, just like it does for TWiki variables.

---+++ Overlapping styles

Because TWiki uses a "best guess" approach to some formatting, it allows overlapping of tags in a way forbidden by HTML, and it is impossible to guarantee 100% that formatting in the original TWiki document will still be there when the same document is loaded and then saved through the !WysiwygPlugin. The most obvious case of this is to do with styles. For example, the sentence
<verbatim class="tml">
*bold _bold-italic* italic_
</verbatim>
is legal in TML, but in HTML is represented by
<verbatim class="tml">
<strong>bold <em>bold-italic</em></strong> <em>italic</em>
</verbatim>
which gets translated back to TML as
<verbatim class="tml">
*bold _bold-italic_* _italic_
</verbatim>
which is correct by construction, but does not render correctly in TWiki. This problem is unfortunately unavoidable due to the way TML works.

---+++ Rowspan processing needs !TablePlugin

The !WysiwygPlugin is able to convert tables with cells that span rows into TML. This requires syntax provided by the %SYSTEMWEB%.TablePlugin (that is, the =| ^ |= markup). the !WysiwygPlugin will therefore only perform row-span related conversion if the !TablePlugin is enabled. The !TablePlugin is enabled by default and hence the !WysiwygPlugin converts tables with cells that span rows between TML and HTML by default.

If the !TablePlugin is *not* enabled, then TML table cells containing only =^= are not converted to rowspans, and HTML tables containing rowspans are not converted to TML.

---+++ TinyMCEPlugin integration

%STARTSECTION{"tinymceintegration"}%
   * Anchors are not handled by WysiwygPlugin
   * WysiwygPlugin fails to roundtrip tables with align="center", border attributes, etc.
      * Description: Sometimes tables will fail to be converted to TML syntax (will stay as HTML) because there are attributes on the table (such as alignment or border decorations) that the !WysiwygPlugin does not know how to preserve. If such attributes are necessary, please use [[VarTABLE]] instead.
      * Work-around:
         * Click inside the problematic table
         * Click the table toolbar button (usually used to create a new table)
         * With the exception of =Cols= and =Rows=, delete/reset all content from the fields on the 'General' and 'Advanced' tabs.
         * Write a [[VarTABLE]] variable above the offending table that adds the desired attributes safely
%ENDSECTION{"tinymceintegration"}%

---++ Plugin Info

%TABLE{ tablewidth="100%" columnwidths="180," }%
|  Author: | [[http://c-dot.co.uk][Crawford Currie]], TWiki Contributors |
|  Copyright | &copy; 2005 ILOG http://www.ilog.fr %BR% &copy; 2007 [[http://www.twiki.net/][Twiki, Inc.]] %BR% &copy; 2008-2012 Foswiki Contributors %BR% &copy; 2005-2018 Peter Thoeny and TWiki:TWiki.TWikiContributor |
|  License | [[http://www.gnu.org/licenses/gpl.html][GPL (Gnu General Public License)]] |
|  Sponsors: | [[http://ilog.fr][ILOG]], [[http://www.carrier.com][Carrier Corporation]], [[http://twiki.net][Twiki Inc]], [[http://www.wave.com/][Wave Systems Corp]] |
|  Plugin Version: | 2018-07-06 |
%TWISTY{
 mode="div"
 showlink="Show Change History %ICONURL{toggleopen}%"
 hidelink="Hide Change History %ICONURL{toggleclose}% "
}%
%TABLE{ tablewidth="100%" columnwidths="180," }%
|  2018-07-06: | TWikibug:Item7841: Copyright update to 2018 |
|  2016-01-09: | TWikibug:Item7708: Copyright update to 2016 |
|  2015-02-16: | TWikibug:Item7604: Switch from GPL v2 to v3 |
|  2014-12-10: | TWikibug:Item7594: Disable WYSIWYG editor if %VBAR%&gt;&gt; ... &lt;&lt;%VBAR% table syntax is present -- TWiki:Main.PeterThoeny |
|  2014-02-19: | TWikibug:Item7436: WYSIWYG editor prepends &#194; to spaces inside verbatim and sticky tags -- TWiki:Main.HideyoImazu |
|  2013-09-18: | TWikibug:Item7338: Import WYSIWYG plugin fixes 2008-2013 -- TWiki:Main.PeterThoeny |
|  1.1.16 (16 May 2013) | Fix problem with entities being expanded to unrepresentable characters |
|  1.1.15 (16 Dec 2012) | Minor perlcritic coding change | 
|         (21 Dec 2012) | Changing a wikiword should not require visiting the TinyMCE link dialog. |
|  1.1.14 (28 Nov 2012) | Clean up hex markers left behind by TinyMCEPlugin <br />\
                          Convert to perl version strings<br />\
                          Preserve Square bracket links |
|  1.1.13 (5 Jun 2012) | Backslash line continuation incorrectly requires a space dlimitier. %BR%\
                         Extraneous hex 03 characters replace % in nested tags |
|  1.1.12 (30 May 2012) | Fix for Item10089 caused link corruption in certain cases. |
|  1.1.11 (22 May 2012) | Compile errors with perl 5.8.8 due to use of new regular expression features. |
|  1.1.10 (21 May 2012) | Better fix for &lt;div tags, also cover &lt;blockquote tags. %BR%\
                          Unable to position cursor above initial verbatim, pre and blockquote blocks %BR%\
                          Syntax for indent was added earlier, but missed from release notes. |
|  1.1.9 (test release) | &lt;div> tags are wrapped in &lt;p> tags. TMCE auto closes them. |
|  1.1.8 (test release) | Fix for Item11814 breaks %<nop>ATTACHURL variable in link. |
|  1.1.7 (test release) | Wysiwyg removes &lt;br /> tags at end of lines. |
|  1.1.6 (test release) | Process TML links as HTML links %BR%\
                          TMCE should honor NOAUTOLINK preference and noautolink blocks. %BR%\
                          Allow TMCE to recognize TML links as HTML links. %BR%\
                          Protect Glue format markup in variables. %BR%\
                          Don't merge verbatim blocks if they have different classes. %BR%\
                          Handle colors implemented using CSS classes. %BR%\
                          Preserve URI Encoding in links.  %BR%\
                          !WikiWords escaped with ! are show as linking. %BR%\
                          TMCE is failing to protect newlines. |
|  1.1.5 (06 Apr 2012) | protect inline script and style tags from wysiwyg. %BR%\
                         protect tags inside pre.%BR%\
                         Protect TML tables from corrupting embedded html markup.%BR%\
                         Prevent #Anchors from being wrapped to the previous line.%BR%\
                         Prevent corruption of HTML tables containin blank lines. |
|  1.1.4 | support pass-through of DEL and INS tags |
|  1.1.3 (08 Nov 2011) | Fix WysiwygPlugin eating newlines inside =%MACRO{...}= expressions (Michael Tempest) |
|  1.1.2 (11 Apr 2011) | Version released with TWiki 1.1.3. Only a minor change related to how the plugin is being upgraded |
|  1.1.1 (19 Jan 2011) | Switch to x.y.z release numbering %BR% \
                         Try to use Variables in the src URLs of images with titles %BR% \
                         Fix attachments REST handler to deal with topics named with international characters %BR%\
                         Protect div and span tags with =style= attributes |
|  28 Jun 2010 | Fix conversion between character encodings. Any characters may be entered in the WYSIWYG editor, regardless of the site's encoding. Where possible, they are converted to the site encoding, otherwise they become entities. %BR%\
                 Fix cursor-movement problems on Mozilla browsers (introduced by )%BR%\
                 Can now place cursor into empty list-item%BR%\
                 Can now move cursor above a table at start of a topic and below a table at the end of the topic %BR%\
                 Protect &lt;br /&gt; tags at the end of a protected line (e.g. in a variable parameter)%BR%\
                 Protect newlines within a &lt;pre&gt; block%BR%\
                 Keep the content of &lt;big&gt; and &lt;var&gt; tags %BR%\
                 Fix stand-alone (command-line) HTML-to-TML conversion |
|  21 May 2010 | Use Wysiwyg transition to remove usually unwanted paragraph html tags in table cells, which are otherwise impossible to remove in !TinyMCE up to at least 3.3.6%BR%\
                 Fix problem where Wysiwyg transition merges two consecutive lists (a result of work on ) |
|  2010-05-17: | TWikibug:Item6433 - more doc fixes; replacing TWIKIWEB with SYSTEMWEB |
|  2010-04-24: | TWikibug:Item6433 - doc improvements, prepare for TWiki 5.0 release |
|  17 Jan 2010 | ATTACHFILESIZELIMIT check fails confusingly if value is "0 " |
|  18 Dec 2009 | move code out of the plugin module to accelerate loading |
|  18 Nov 2009 | Convert tables with cells that span rows |
|  22 Oct 2009 | Protect div style= by default |
|  18 Sep 2009 | Prevent dataloss when saving a topic in Wysiwyg where there are a pair of sticky tags inside verbatim tags |
|  28 Jun 2009 | Protect XML tags registered by plugins, and not just the content between them (Michael Tempest) |
|  06 Jun 2009 | Correct dependency on HTML::Parser (Will Norris). Correct processing of colour and typewriter-text in several situations, include application to bold text and table cells (Michael Tempest). Remove unwanted extra &lt;sticky&gt; tags (Michael Tempest). Let plugins register XML tags that should be protected like variables |
|  10 Apr 2009 | fixed colour handling |
|  03 Dec 2008 | fixed empty bullet list problem. |
|  22 Oct 2008 | Fixed TWikibug:Item5961 (emphasis), TWikibug:Item6089 (backslash in verbatim) |
|  07 Aug 2008 | Fixed TWikibug:Item5707 (mod_perl) |
|  03 Aug 2008 | TWiki 4.2.1 release version |
|  25 May 2008 | TWikibug:Item5457: TWikibug:Item5528: TWikibug:Item5626: using a debug simulation, I believe I have finally fixed all the complexities of using international character sets with the translator. |
|  13 Apr 2008 | TWikibug:Item4946: TWikibug:Item5530: I think I have finally fixed non-iso-8859-1 character sets. Painful. TWikibug:Item5393: removed spurious DIV generated by IE inside LI tags |
|  31 Mar 2008 | TWikibug:Item5314: TWikibug:Item5457: Fixed pickaxe mode for editing UTF-8. Characters above 255 are converted to entitites, which is a bit of a PITA, but at least it no longer corrupts topics. |
|  28 Mar 2008 | TWikibug:Item5294: fixed angle brackets in plain text and promoted sticky to be higher priority than any other tag, solving several problems in one go |
|  24 Jan 2008 | TWikibug:Item5257: remove extra spaces at end of Set lines |
|  20 Dec 2007 | TWikibug:Item5022: made TT font size same as verbatim. Had to add a new style to do it, as TMCE didn't want to play with TT or CODE tags. TWikibug:Item5138: post-conversion of 8-bit entities to characters to aid searching etc. |
|  19 Dec 2007 | TWikibug:Item4836: make the parser tolerant of META, so pasting OO docs works TWikibug:Item4969: autoclose BR and HR tags TWikibug:Item5132: fixed IMG tags TWikibug:Item5076: fixed line-sensitive TML embedded in tables |
|  08 Nov 2007 | TWikibug:Item4923: fixed blocking of table conversion due to empty attributes TWikibug:Item4936: An em embedded in an em was getting eaten TWikibug:Item4817: added typewriter text button TWikibug:Item4850: added font colour controls TWikibug:Item4645: added REST handlers for upload and fetching lists of attachments |
|  02 Nov 2007 | TWikibug:Item4903: corrected over-enthusiastive interpretation of ! as an escape |
|  21 Oct 2007 | TWikibug:Item4788: fixed unbalanced protect, which could cause loss of protected status TWikibug:Item4811: noautolink *looks* like an HTML construct but in fact is not; the tag is infact an "on-off" switch and does not imply any HTML structure, so cannot be converted to a DIV or a span, so has to be removed. TWikibug:Item4747: added &lt;sticky&gt; to try to overcome limitations in translation TWikibug:Item4831: added increased flexibility in deciding what HTML get converted to TML, and what does not. Analysed all the HTML4 tags to establish initial settings. TWikibug:Item4847: don't call non-existent function with older HTML::Parser releases TWikibug:Item4844: Saving a table from IE didn't convert it back to TML TWikibug:Item4855: table rows generated from TWiki variables were being eaten |
|  06 Oct 2007 | TWikibug:Item4700: fixed colspans TWikibug:Item4701: removed extra line between %TABLE and the table TWikibug:Item4705: fixed spacing around literal and verbatim blocks TWikibug:Item4706: merge adjacent verbatim blocks separated only by whitespace TWikibug:Item4712: fixed eating of noautolink and literal TWikibug:Item4763: list items spanning multiple lines fixed TWikibug:Item4867: released tml2html |
|  17 Sep 2007 | TWikibug:Item4647: TWikibug:Item4652: problems related to DIV fixed. TWikibug:Item4653: fixed multi-line twiki variables |
|  16 Sep 2007 | TWikibug:Item4630: polished up the way the secret string is done, to ensure synch between perl and JS. Item4622: added UTF-8 handling steps that fixup malformed UTF8 strings before presenting them to the editor (saves Moz) and stops the editor passing them back to TWiki (saves IE). Removed extra entity decoding steps that were causing problems. TWikibug:Item4629: fixed issues with verbatim, highlighted by previous mangling of this topic |
|  13 Sep 2007 | TWikibug:Item4613 cleaned up spurious message when navigating away TWikibug:Item4615 fixed incorrect rendering of emphasis next to br |
|  12 Sep 2007 | TWikibug:Item4604 Fixes to REST handler, and add ability to trigger !HTML2TML conversion from a content comment alone (required for some editors) TWikibug:Item4588 fixes to conversion of double-character emphases |
|  07 Sep 2007 | TWikibug:Item4503 excess empty lines TWikibug:Item4486 no toc headers with unofficial syntax TWikibug:Item4560: empty lines lost TWikibug:Item4566: corrupted table on save TWikibug:Item4550 section tags being eaten |
|  04 Sep 2007 | TWikibug:Item4534 TWikibug:Item4535 fixed |
|  | See Subversion logs for earlier revisions |
%ENDTWISTY%
%TABLE{ tablewidth="100%" columnwidths="180," }%
|  Dependencies: | <table border="1"><tr><th>Name</th><th>Version</th><th>Description</th></tr><tr><td align="left">HTML::Parser</td><td align="left">&gt;=3.28</td><td align="left">Required. Available from [[http://cpan.uwinnipeg.ca/search?query=HTML%3A%3AParser&mode=dist][CPAN]].</td></tr><tr><td align="left">HTML::Entities</td><td align="left">&gt;=1.25</td><td align="left">Required. Available from [[http://cpan.uwinnipeg.ca/search?query=HTML%3A%3AEntities&mode=dist][CPAN]].</td></tr><tr><td align="left">Encode</td><td align="left">&gt;=2.01</td><td align="left">Required.</td></tr></table> |
|  Plugin Home: | http://twiki.org/cgi-bin/view/Plugins/%TOPIC% |
|  Feedback: | http://twiki.org/cgi-bin/view/Plugins/%TOPIC%Dev |
|  Appraisal: | http://twiki.org/cgi-bin/view/Plugins/%TOPIC%Appraisal |

__Related Topics:__ WysiwygPluginSettings, WysiwygPluginTopicLister, TinyMCEPlugin, %SYSTEMWEB%.TWikiPreferences, %SYSTEMWEB%.TWikiPlugins
