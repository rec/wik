head	1.11;
access;
symbols;
locks; strict;
comment	@# @;


1.11
date	2016.02.23.17.58.37;	author TWikiContributor;	state Exp;
branches;
next	1.10;

1.10
date	2013.03.10.06.40.18;	author TWikiContributor;	state Exp;
branches;
next	1.9;

1.9
date	2010.05.29.14.44.12;	author TWikiContributor;	state Exp;
branches;
next	1.8;

1.8
date	2007.01.16.04.12.04;	author TWikiContributor;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.01.05.55.09;	author TWikiContributor;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.01.12.01.17;	author TWikiContributor;	state Exp;
branches;
next	1.5;

1.5
date	2003.04.15.05.19.25;	author PeterThoeny;	state Exp;
branches;
next	1.4;

1.4
date	2003.03.22.05.12.00;	author PeterThoeny;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.23.05.52.00;	author PeterThoeny;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.23.06.58.32;	author PeterThoeny;	state Exp;
branches;
next	1.1;

1.1
date	2000.08.18.08.47.58;	author PeterThoeny;	state Exp;
branches;
next	;


desc
@none
@


1.11
log
@buildrelease
@
text
@%META:TOPICINFO{author="TWikiContributor" date="1456250317" format="1.1" version="11"}%
---+!! Regular Expressions

%TOC%

---++ Introduction

Regular expressions (REs), unlike simple queries, allow you to search for text which matches a particular pattern.

REs are similar to (but more powerful than) the "wildcards" used in the command-line interfaces found in operating systems such as Unix and MS-DOS. REs are used by sophisticated search engines, as well as by many Unix-based languages and tools ( e.g., =awk=, =grep=, =lex=, =perl=, and =sed= ).

---++ Examples

| =compan(y%VBAR%ies)= | Search for *company*, *companies* |
| =(peter%VBAR%paul)= | Search for *peter*, *paul* |
| =bug*= | Search for *bug*, *bugg*, *buggg* or simply *bu* (a star matches *zero* or more instances of the previous character) |
| =bug.*= | Search for *bug*, *bugs*, *bugfix* (a dot-star matches zero or more instances of *any* character) |
| =[Bb]ag= | Search for *Bag*, *bag* |
| =b[aiueo]g= | Second letter is a vowel. Matches *bag*, *bug*, *big* |
| =b.g= | Second letter is any letter. Matches also *b&amp;g* |
| =[a-zA-Z]= | Matches any one letter (but not a number or a symbol) |
| =[^0-9a-zA-Z]= | Matches any symbol (but not a number or a letter) |
| =[A-Z][A-Z]*= | Matches one or more uppercase letters |
| =[0-9]{3}-[0-9]{2}-[0-9]{4}= | US social security number, e.g. *123-45-6789* |
| =Chart;PNG;!JPG= | Search for topics containing the words *Chart* _and_ *PNG* _and not_ *JPG*. The =";"= and ="!"= are TWiki-specific operators and are not part of regular expression |

---++ Searches with "and" combinations

A TWiki =type="regex"= [[VarSEARCH][SEARCH]] introduces two special characters to regular expressions:

   * The semicolon =";"= is an AND-operator.%BR% Example search for "form" _and_ "template": =form;template=
   * The exclamation point ="!"= as a NOT-operator.%BR% Example search for "soap" _and_ "wsdl" _and not_ "shampoo": =soap;wsdl;!shampoo=

TWiki also supports a [[QuerySearch][SQL-like query search]] where you can literally use AND and NOT operators.

Use Google if your TWiki site is public. Example search for "form" _and_ "template" at TWiki.org: =site:twiki.org +form +template=

---++ Advanced

Here is stuff for our UNIX freaks: (copied from 'man egrep')

<blockquote>
A regular expression is a pattern that describes a set of strings. Regular expressions are constructed analogously to arithmetic expressions, by using various operators to combine smaller expressions.

The fundamental building blocks are the regular expressions that match a single character. Most characters, including all letters and digits, are regular expressions that match themselves. Any metacharacter with special meaning may be quoted by preceding it with a backslash.

A bracket expression is a list of characters enclosed by [ and ]. It matches any single character in that list; if the first character of the list is the caret ^ then it matches any character not in the list. For example, the regular expression [0123456789] matches any single digit.

Within a bracket expression, a range expression consists of two characters separated by a hyphen. It matches any single character that sorts between the two characters, inclusive, using the locale's collating sequence and character set. For example, in the default C locale, [a-d] is equivalent to [abcd]. Many locales sort characters in dictionary order, and in these locales [a-d] is typically not equivalent to [abcd]; it might be equivalent to [aBbCcDd], for example.

Finally, certain named classes of characters are predefined within bracket expressions, as follows. Their names are self explanatory, and they are [:alnum:], [:alpha:], [:cntrl:], [:digit:], [:graph:], [:lower:], [:print:], [:punct:], [:space:], [:upper:], and [:xdigit:]. For example, [<nop>[:alnum:]<nop>] means [0-9A-Za-z], except the latter form depends upon the C locale and the ASCII character encoding, whereas the former is independent of locale and character set. (Note that the brackets in these class names are part of the symbolic names, and must be included in addition to the brackets delimiting the bracket list.) Most metacharacters lose their special meaning inside lists. To include a literal ] place it first in the list. Similarly, to include a literal ^ place it anywhere but first. Finally, to include a literal - place it last.

The period . matches any single character. The symbol \w is a synonym for [<nop>[:alnum:]<nop>] and \W is a synonym for [^[:alnum]<nop>].

The caret ^ and the dollar sign $ are metacharacters that respectively match the empty string at the beginning and end of a line. The symbols \&lt; and \&gt; respectively match the empty string at the beginning and end of a word. The symbol \b matches the empty string at the edge of a word, and \B matches the empty string provided it's not at the edge of a word.

A regular expression may be followed by one of several repetition operators:
| ? | The preceding item is optional and matched at most once. |
| * | The preceding item will be matched zero or more times. |
| + | The preceding item will be matched one or more times. |
| {n} | The preceding item is matched exactly n times. |
| {n,} | The preceding item is matched n or more times. |
| {n,m} | The preceding item is matched at least n times, but not more than m times. |

Two regular expressions may be concatenated; the resulting regular expression matches any string formed by concatenating two substrings that respectively match the concatenated subexpressions.

Two regular expressions may be joined by the infix operator |; the resulting regular expression matches any string matching either subexpression.

Repetition takes precedence over concatenation, which in turn takes precedence over alternation. A whole subexpression may be enclosed in parentheses to override these precedence rules.

The backreference \n, where n is a single digit, matches the substring previously matched by the nth parenthesized subexpression of the regular expression.
</blockquote>

__Related Links:__ 
   * TWiki:Codev/TWikiPresentation2013x03x07 - Presentation: Regular Expressions, to match or not, that is the question
   * http://perldoc.perl.org/perlretut.html - Regular expressions tutorial
   * http://www.perl.com/doc/manual/html/pod/perlre.html - Perl regular expressions

__Related Topics:__ UserDocumentationCategory, VarSEARCH, FormattedSearch, QuerySearch

-- __Contributors:__ PeterThoeny, TWiki:Main.JohnTalintyre 
@


1.10
log
@buildrelease
@
text
@d1 1
a1 1
%META:TOPICINFO{author="TWikiContributor" date="1362897618" format="1.1" version="10"}%
d10 1
a10 1
REs are similar to (but more poweful than) the "wildcards" used in the command-line interfaces found in operating systems such as Unix and MS-DOS. REs are used by sophisticated search engines, as well as by many Unix-based languages and tools ( e.g., =awk=, =grep=, =lex=, =perl=, and =sed= ).
d14 2
a15 2
| =compan(y&#124;ies)= | Search for *company*, *companies* |
| =(peter&#124;paul)= | Search for *peter*, *paul* |
@


1.9
log
@buildrelease
@
text
@d1 1
a1 1
%META:TOPICINFO{author="TWikiContributor" date="1272930836" format="1.1" version="9"}%
d75 1
d81 1
a81 1
-- __Contributors:__ Main.PeterThoeny, Main.JohnTalintyre 
@


1.8
log
@buildrelease
@
text
@d1 1
a1 1
%META:TOPICINFO{author="TWikiContributor" date="1164227726" format="1.1" version="8"}%
d5 1
d25 1
a25 1
| =PNG;Chart= | Search for topics containing the words *PNG* _and_ *Chart*. The =";"= _and_ separator is TWiki-specific and is not a regular expression; it is a useful facility that is enabled when regular expression searching is enabled. |
d29 4
a32 1
   * TWiki extends the regular expressions with an _and_ search. The delimiter is a semicolon =;=. Example search for "form" _and_ "template": =form;template=
d34 3
a36 1
   * Use Google if your TWiki site is public. Example search for "form" _and_ "template" at TWiki.org: =site:twiki.org +form +template=
d78 3
a80 1
__Related Topics:__ UserDocumentationCategory
@


1.7
log
@buildrelease
@
text
@d1 1
a1 1
%META:TOPICINFO{author="TWikiContributor" date="1111929255" format="1.0" version="7"}%
d68 4
@


1.6
log
@buildrelease
@
text
@d1 1
a1 1
%META:TOPICINFO{author="TWikiContributor" date="1111929255" format="1.0" version="6"}%
d28 1
a28 1
	* TWiki extends the regular expressions with an _and_ search. The delimiter is a semicolon =;=. Example search for "form" _and_ "template": =form;template=
d30 1
a30 1
	* Use Google if your TWiki site is public. Example search for "form" _and_ "template" at TWiki.org: =site:twiki.org +form +template=
@


1.5
log
@none
@
text
@d1 68
a68 66
%META:TOPICINFO{author="PeterThoeny" date="1050383965" format="1.0" version="1.5"}%
---+!! Regular Expressions

%TOC%
---++ Introduction

Regular expressions (REs), unlike simple queries, allow you to search for text which matches a particular pattern.

REs are similar to (but more poweful than) the "wildcards" used in the command-line interfaces found in operating systems such as Unix and MS-DOS. REs are used by sophisticated search engines, as well as by many Unix-based languages and tools ( e.g., =awk=, =grep=, =lex=, =perl=, and =sed= ).

---++ Examples

| =compan(y&#124;ies)= | Search for *company*, *companies* |
| =(peter&#124;paul)= | Search for *peter*, *paul* |
| =bug*= | Search for *bug*, *bugg*, *buggg* or simply *bu* (a star matches *zero* or more instances of the previous character) |
| =bug.*= | Search for *bug*, *bugs*, *bugfix* (a dot-star matches zero or more instances of *any* character) |
| =[Bb]ag= | Search for *Bag*, *bag* |
| =b[aiueo]g= | Second letter is a vowel. Matches *bag*, *bug*, *big* |
| =b.g= | Second letter is any letter. Matches also *b&amp;g* |
| =[a-zA-Z]= | Matches any one letter (but not a number or a symbol) |
| =[^0-9a-zA-Z]= | Matches any symbol (but not a number or a letter) |
| =[A-Z][A-Z]*= | Matches one or more uppercase letters |
| =[0-9]{3}-[0-9]{2}-[0-9]{4}= | US social security number, e.g. *123-45-6789* |
| =PNG;Chart= | Search for topics containing the words *PNG* _and_ *Chart*. The =";"= _and_ separator is TWiki-specific and is not a regular expression; it is a useful facility that is enabled when regular expression searching is enabled. |

---++ Searches with "and" combinations

	* TWiki extends the regular expressions with an _and_ search. The delimiter is a semicolon =;=. Example search for "form" _and_ "template": =form;template=

	* Use Google if your TWiki site is public. Example search for "form" _and_ "template" at TWiki.org: =site:twiki.org +form +template=

---++ Advanced

Here is stuff for our UNIX freaks: (copied from 'man egrep')

<blockquote>
A regular expression is a pattern that describes a set of strings. Regular expressions are constructed analogously to arithmetic expressions, by using various operators to combine smaller expressions.

The fundamental building blocks are the regular expressions that match a single character. Most characters, including all letters and digits, are regular expressions that match themselves. Any metacharacter with special meaning may be quoted by preceding it with a backslash.

A bracket expression is a list of characters enclosed by [ and ]. It matches any single character in that list; if the first character of the list is the caret ^ then it matches any character not in the list. For example, the regular expression [0123456789] matches any single digit.

Within a bracket expression, a range expression consists of two characters separated by a hyphen. It matches any single character that sorts between the two characters, inclusive, using the locale's collating sequence and character set. For example, in the default C locale, [a-d] is equivalent to [abcd]. Many locales sort characters in dictionary order, and in these locales [a-d] is typically not equivalent to [abcd]; it might be equivalent to [aBbCcDd], for example.

Finally, certain named classes of characters are predefined within bracket expressions, as follows. Their names are self explanatory, and they are [:alnum:], [:alpha:], [:cntrl:], [:digit:], [:graph:], [:lower:], [:print:], [:punct:], [:space:], [:upper:], and [:xdigit:]. For example, [<nop>[:alnum:]<nop>] means [0-9A-Za-z], except the latter form depends upon the C locale and the ASCII character encoding, whereas the former is independent of locale and character set. (Note that the brackets in these class names are part of the symbolic names, and must be included in addition to the brackets delimiting the bracket list.) Most metacharacters lose their special meaning inside lists. To include a literal ] place it first in the list. Similarly, to include a literal ^ place it anywhere but first. Finally, to include a literal - place it last.

The period . matches any single character. The symbol \w is a synonym for [<nop>[:alnum:]<nop>] and \W is a synonym for [^[:alnum]<nop>].

The caret ^ and the dollar sign $ are metacharacters that respectively match the empty string at the beginning and end of a line. The symbols \&lt; and \&gt; respectively match the empty string at the beginning and end of a word. The symbol \b matches the empty string at the edge of a word, and \B matches the empty string provided it's not at the edge of a word.

A regular expression may be followed by one of several repetition operators:
| ? | The preceding item is optional and matched at most once. |
| * | The preceding item will be matched zero or more times. |
| + | The preceding item will be matched one or more times. |
| {n} | The preceding item is matched exactly n times. |
| {n,} | The preceding item is matched n or more times. |
| {n,m} | The preceding item is matched at least n times, but not more than m times. |

Two regular expressions may be concatenated; the resulting regular expression matches any string formed by concatenating two substrings that respectively match the concatenated subexpressions.

Two regular expressions may be joined by the infix operator |; the resulting regular expression matches any string matching either subexpression.

Repetition takes precedence over concatenation, which in turn takes precedence over alternation. A whole subexpression may be enclosed in parentheses to override these precedence rules.

The backreference \n, where n is a single digit, matches the substring previously matched by the nth parenthesized subexpression of the regular expression.
</blockquote>
@


1.4
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="PeterThoeny" date="1048309920" format="1.0" version="1.4"}%
d15 2
a16 1
| =bug*= | Search for *bug*, *bugs*, *bugfix* |
@


1.3
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="PeterThoeny" date="1038030720" format="1.0" version="1.3"}%
a4 1

d7 1
a7 1
Regular expressions (REs), unlike simple queries, allow you to search for text which matches a particular pattern. 
d23 1
a23 1
| =PNG;Chart= | Search for topics containing the words *PNG* _and_ *Chart*. This is not a regular expression! But a useful facility that is enabled when regular expression searching is enabled. |
d42 1
a42 1
Within a bracket expression, a range expression consists of two characters separated by a hyphen. It matches any single character that sorts between the two characters, inclusive, using the locale's collating sequence and character set. For example, in the default C locale, [a-d] is equivalent to [abcd]. Many locales sort characters in dictionary order, and in these locales [a-d] is typically not equivalent to [abcd]; it might be equivalent to [aBbCcDd], for example. 
@


1.2
log
@none
@
text
@d1 7
d12 50
a61 1
*Examples*
d63 1
a63 161
<TABLE>
  <TR>
	 <TD>
		compan(y|ies)
	 </TD><TD>
		Search for _company_ , _companies_
	 </TD>
  </TR><TR>
	 <TD>
		(peter|paul)
	 </TD><TD>
		Search for _peter_ , _paul_
	 </TD>
  </TR><TR>
	 <TD>
		bug*
	 </TD><TD>
		Search for _bug_ , _bugs_ , _bugfix_
	 </TD>
  </TR><TR>
	 <TD>
		[Bb]ag
	 </TD><TD>
		Search for _Bag_ , _bag_
	 </TD>
  </TR><TR>
	 <TD>
		b[aiueo]g
	 </TD><TD>
		Second letter is a vowel. Matches _bag_ , _bug_ , _big_
	 </TD>
  </TR><TR>
	 <TD>
		b.g
	 </TD><TD>
		Second letter is any letter. Matches also _b&g_
	 </TD>
  </TR><TR>
	 <TD>
		[a-zA-Z]
	 </TD><TD>
		Matches any one letter (not a number and a symbol)
	 </TD>
  </TR><TR>
	 <TD>
		[^0-9a-zA-Z]
	 </TD><TD>
		Matches any symbol (not a number or a letter)
	 </TD>
  </TR><TR>
	 <TD>
		[A-Z][A-Z]*
	 </TD><TD>
		Matches one or more uppercase letters
	 </TD>
  </TR><TR>
	 <TD>
		[0-9][0-9][0-9]-[0-9][0-9]- <br> [0-9][0-9][0-9][0-9]
	 </TD><TD VALIGN="top">
		US social security number, e.g. 123-45-6789
	 </TD>
  </TR>
</TABLE>

Here is stuff for our UNIX freaks: <BR>
(copied from 'man grep')

<pre>
	  \c	A backslash (\) followed by any special character is  a
			 one-character  regular expression that matches the spe-
			 cial character itself.  The special characters are:

					+	 `.', `*', `[',  and  `\'  (period,  asterisk,
						  left  square  bracket, and backslash, respec-
						  tively), which  are  always  special,  except
						  when they appear within square brackets ([]).

					+	 `^' (caret or circumflex), which  is  special
						  at the beginning of an entire regular expres-
						  sion, or when it immediately follows the left
						  of a pair of square brackets ([]).

					+	 $ (currency symbol), which is special at  the
						  end of an entire regular expression.							  

	  .	 A `.' (period) is a  one-character  regular  expression
			 that matches any character except NEWLINE.
 
	  [string]
			 A non-empty string of  characters  enclosed  in  square
			 brackets  is  a  one-character  regular expression that
			 matches any one character in that string.  If, however,
			 the  first  character of the string is a `^' (a circum-
			 flex or caret), the  one-character  regular  expression
			 matches  any character except NEWLINE and the remaining
			 characters in the string.  The  `^'  has  this  special
			 meaning only if it occurs first in the string.  The `-'
			 (minus) may be used to indicate a range of  consecutive
			 ASCII  characters;  for example, [0-9] is equivalent to
			 [0123456789].  The `-' loses this special meaning if it
			 occurs  first (after an initial `^', if any) or last in
			 the string.  The `]' (right square  bracket)  does  not
			 terminate  such a string when it is the first character
			 within it (after an initial  `^',  if  any);  that  is,
			 []a-f]  matches either `]' (a right square bracket ) or
			 one of the letters a through  f  inclusive.	The  four
			 characters  `.', `*', `[', and `\' stand for themselves
			 within such a string of characters.

	  The following rules may be used to construct regular expres-
	  sions:

	  *	 A one-character regular expression followed by `*'  (an
			 asterisk)  is a regular expression that matches zero or
			 more occurrences of the one-character  regular  expres-
			 sion.	If  there  is  any choice, the longest leftmost
			 string that permits a match is chosen.

	  ^	 A circumflex or caret (^) at the beginning of an entire
			 regular  expression  constrains that regular expression
			 to match an initial segment of a line.

	  $	 A currency symbol ($) at the end of an  entire  regular
			 expression  constrains that regular expression to match
			 a final segment of a line.

	  *	 A  regular  expression  (not  just	a	one-
			 character regular expression) followed by `*'
			 (an asterisk) is a  regular  expression  that
			 matches  zero or more occurrences of the one-
			 character regular expression.	If  there  is
			 any  choice, the longest leftmost string that
			 permits a match is chosen.

	  +	 A regular expression followed by `+' (a  plus
			 sign)  is  a  regular expression that matches
			 one or more occurrences of the  one-character
			 regular  expression.  If there is any choice,
			 the longest leftmost string  that  permits  a
			 match is chosen.

	  ?	 A regular expression followed by `?' (a ques-
			 tion  mark)  is  a  regular  expression  that
			 matches zero or one occurrences of  the  one-
			 character  regular  expression.	If there is
			 any choice, the longest leftmost string  that
			 permits a match is chosen.

	  |	 Alternation:	 two	 regular	 expressions
			 separated  by  `|'  or NEWLINE match either a
			 match for  the  first  or  a  match  for  the
			 second.

	  ()	A regular expression enclosed in  parentheses
			 matches a match for the regular expression.

	  The order of precedence of operators at the same parenthesis
	  level  is  `[ ]'  (character  classes),  then  `*'  `+'  `?'
	  (closures),then  concatenation,  then  `|'  (alternation)and
	  NEWLINE.
</pre>
d65 2
@


1.1
log
@none
@
text
@d1 3
a3 1
Regular expressions allow more specific queries then a simple query.
@
